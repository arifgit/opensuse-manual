<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<sect2 xml:base="system_repair.xml" id="sec.trouble.data.recover">
 <title>Recovering a Corrupted System</title><indexterm>
 <primary>recovering systems</primary></indexterm>
 <para>
  There are several reasons why a system could fail to come up and run
  properly. A corrupted file system following a system crash, corrupted
  configuration files, or a corrupted boot loader configuration are the most
  common ones.
 </para>

 

 
 <sect3 id="sec.trouble.data.recover.rescue">
  <title>Using the Rescue System</title><indexterm>
  <primary>rescue system</primary></indexterm><indexterm>
  <primary>system</primary>
  <secondary>rescuing</secondary></indexterm>
  <para>
   <phrase os="osuse">openSUSE</phrase> contains a rescue system. The rescue system is a small
   Linux system that can be loaded into a RAM disk and mounted as root file
   system, allowing you to access your Linux partitions from the outside.
   Using the rescue system, you can recover or modify any important aspect
   of your system:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Manipulate any type of configuration file.
    </para>
   </listitem>
   <listitem>
    <para>
     Check the file system for defects and start automatic repair processes.
    </para>
   </listitem>
   <listitem>
    <para>
     Access the installed system in a <quote>change root</quote>
     environment.
    </para>
   </listitem>
   <listitem>
    <para>
     Check, modify, and reinstall the boot loader configuration.
    </para>
   </listitem>
   <listitem>
    <para>
     Recover from a badly installed device driver or unusable kernel.
    </para>
   </listitem>
   <listitem>
    <para>
     Resize partitions using the parted command. Find more information about
     this tool at the GNU Parted website
     <ulink url="http://www.gnu.org/software/parted/parted.html"/>.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The rescue system can be loaded from various sources and locations. The
   simplest option is to boot the rescue system from the original
   installation medium:
  </para>
  <procedure><indexterm>
   <primary>rescue system</primary>
   <secondary>starting from medium</secondary></indexterm>
   <step performance="required">
    <para>
     Insert the installation medium into your DVD drive.
    </para>
   </step>
   <step performance="required">
    <para>
     Reboot the system.
    </para>
   </step>
   <step performance="required">
    <para>
     At the boot screen, press <keycap>F4</keycap> and choose
     <guimenu>DVD-ROM</guimenu>. Then choose <guimenu>Rescue
     System</guimenu> from the main menu.
    </para>
   </step>
   <step performance="required">
    <para>
     Enter <literal>root</literal> at the <literal>Rescue:</literal> prompt.
     A password is not required.
    </para>
   </step>
  </procedure>
  <procedure id="proc.trouble.data.recover.rescue.network"><indexterm>
   <primary>rescue system</primary>
   <secondary>starting from network source</secondary></indexterm>
   <para>
    If your hardware setup does not include a DVD drive, you can boot the
    rescue system from a network source<phrase os="osuse"> (including the
    openSUSE FTP server)</phrase>. The following example applies to a
    remote boot scenarioâ€”if using another boot medium, such as a DVD,
    modify the <filename>info</filename> file accordingly and boot as you
    would for a normal installation.
   </para>
   <step performance="required">
    <para>
     Enter the configuration of your PXE boot setup and add the lines
     <literal>install=<replaceable>protocol</replaceable>://<replaceable>instsource</replaceable></literal>
     and <literal>rescue=1</literal>. If you need to start the repair
     system, use <literal>repair=1</literal> instead. As with a normal
     installation, <replaceable>protocol</replaceable> stands for any of the
     supported network protocols (NFS, HTTP, FTP, etc.) and
     <replaceable>instsource</replaceable> for the path to your network
     installation source.
    </para>
   </step>
   <step performance="required">
    <para>
     Boot the system using <quote>Wake on LAN</quote>, as described in
     <xref linkend="sec.deployment.remoteinst.boot.wol"/>.
    </para>
   </step>
   <step performance="required">
    <para>
     Enter <literal>root</literal> at the <literal>Rescue:</literal> prompt.
     A password is not required.
    </para>
   </step>
  </procedure>
  <para>
   Once you have entered the rescue system, you can make use of the virtual
   consoles that can be reached with
   <keycombo><keycap function="alt"/><keycap>F1</keycap></keycombo> to
   <keycombo><keycap function="alt"/><keycap>F6</keycap></keycombo>.
  </para>
  <para>
   A shell and many other useful utilities, such as the mount program, are
   available in the <filename>/bin</filename> directory. The
   <filename>sbin</filename> directory contains important file and network
   utilities for reviewing and repairing the file system. This directory
   also contains the most important binaries for system maintenance, such as
   fdisk, mkfs, mkswap, mount, mount, init, and shutdown, and ifconfig, ip,
   route, and netstat for maintaining the network. The directory
   <filename>/usr/bin</filename> contains the vi editor, find, less, and
   ssh.
  </para>
  <para>
   To see the system messages, either use the command
   <command>dmesg</command> or view the file
   <filename>/var/log/messages</filename>.
  </para>
  <sect4 id="sec.trouble.data.recover.rescue.file">
   <title>Checking and Manipulating Configuration Files</title>
   <para>
    As an example for a configuration that might be fixed using the rescue
    system, imagine you have a broken configuration file that prevents the
    system from booting properly. You can fix this using the rescue system.
   </para>
   <procedure>
    <para>
     To manipulate a configuration file, proceed as follows:
    </para>
    <step performance="required">
     <para>
      Start the rescue system using one of the methods described above.
     </para>
    </step>
    <step performance="required">
     <para>
      To mount a root file system located under
      <filename>/dev/sda6</filename> to the rescue system, use the following
      command:
     </para>
<screen>mount /dev/sda6 /mnt</screen>
     <para>
      All directories of the system are now located under
      <filename>/mnt</filename>
     </para>
    </step>
    <step performance="required">
     <para>
      Change the directory to the mounted root file system:
     </para>
<screen>cd /mnt</screen>
    </step>
    <step performance="required">
     <para>
      Open the problematic configuration file in the vi editor. Adjust and
      save the configuration.
     </para>
    </step>
    <step performance="required">
     <para>
      Unmount the root file system from the rescue system:
     </para>
<screen>umount /mnt</screen>
    </step>
    <step performance="required">
     <para>
      Reboot the machine.
     </para>
    </step>
   </procedure>
  </sect4>
  <sect4 id="sec.trouble.data.recover.rescue.filesystem">
   <title>Repairing and Checking File Systems</title><indexterm>
   <primary>file systems</primary>
   <secondary>repairing</secondary></indexterm>
   <para>
    Generally, file systems cannot be repaired on a running system. If you
    encounter serious problems, you may not even be able to mount your root
    file system and the system boot may end with a <quote>kernel
    panic</quote>. In this case, the only way is to repair the system from
    the outside. <phrase os="osuse">The rescue system provides
    all tools needed for a manual file system check or repair.</phrase> It
    contains the utilities to check and repair the <literal>btrfs</literal>,
    <literal>ext2</literal>, <literal>ext3</literal>,
    <literal>ext4</literal>, <literal>reiserfs</literal>,
    <literal>xfs</literal>, <literal>dosfs</literal>, and
    <literal>vfat</literal> file systems.
   </para>
  </sect4>
  <sect4 id="sec.trouble.data.recover.rescue.access">
   <title>Accessing the Installed System</title>
   <para>
    If you need to access the installed system from the rescue system, you
    need to do this in a <emphasis>change root</emphasis> environment. For
    example, to modify the boot loader configuration, or to execute a
    hardware configuration utility.
   </para>
   <para>
    To set up a change root environment based on the installed system,
    proceed as follows:
   </para>
   <procedure>
    <step performance="required">
     <para>
      First mount the root partition from the installed system and the
      device file system (change the device name to your current settings):
     </para>
<screen>mount /dev/sda6 /mnt
mount --bind /dev /mnt/dev</screen>
    </step>
    <step performance="required">
     <para>
      Now you can <quote>change root</quote> into the new environment:
     </para>
<screen>chroot /mnt</screen>
    </step>
    <step performance="required">
     <para>
      Then mount <filename>/proc</filename> and <filename>/sys</filename>:
     </para>
<screen>mount /proc
mount /sys</screen>
    </step>
    <step performance="required">
     <para>
      Finally, mount the remaining partitions from the installed system:
     </para>
<screen>mount -a</screen>
    </step>
    <step performance="required">
     <para>
      Now you have access to the installed system. Before rebooting the
      system, unmount the partitions with <command>umount
      <option>-a</option></command> and leave the <quote>change root</quote>
      environment with <command>exit</command>.
     </para>
    </step>
   </procedure>
   <warning>
    <title>Limitations</title>
    <para>
     Although you have full access to the files and applications of the
     installed system, there are some limitations. The kernel that is
     running is the one that was booted with the rescue system, not with the
     change root environment. It only supports essential hardware and it is
     not possible to add kernel modules from the installed system unless the
     kernel versions are exactly the same. Always check the version of the
     currently running (rescue) kernel with <command>uname -r</command> and
     then find out if a matching subdirectory exists in the
     <filename>/lib/modules</filename> directory in the change root
     environment. If yes, you can use the installed modules, otherwise you
     need to supply their correct versions on other media, such as a USB
     stick. Most often the rescue kernel version differs from the installed
     one â€” then you cannot simply access a sound card, for example. It
     is also not possible to start a graphical user interface.
    </para>
    <para>
     Also note that you leave the <quote>change root</quote> environment
     when you switch the console with
     <keycombo><keycap function="alt"/><keycap>F1</keycap></keycombo> to
     <keycombo><keycap function="alt"/><keycap>F6</keycap></keycombo>.
    </para>
   </warning>
  </sect4>
  <sect4 id="sec.trouble.data.recover.rescue.grub">
   <title>Modifying and Reinstalling the Boot Loader</title>
   <para>
    Sometimes a system cannot boot because the boot loader configuration is
    corrupted. The start-up routines cannot, for example, translate physical
    drives to the actual locations in the Linux file system without a
    working boot loader.
   </para>
   <para>
    To check the boot loader configuration and reinstall the boot loader,
    proceed as follows:
   </para>
   <procedure>
    <step performance="required">
     <para>
      Perform the necessary steps to access the installed system as
      described in <xref linkend="sec.trouble.data.recover.rescue.access"/>.
     </para>
    </step>
    <step performance="required">
     <para>
      Check whether the following files are correctly configured according
      to the GRUB configuration principles outlined in
      <xref linkend="cha.grub"/> and apply fixes if necessary.
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <filename>/etc/grub.conf</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/boot/grub/device.map</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/boot/grub/menu.lst</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/etc/sysconfig/bootloader</filename>
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step performance="required">
     <para>
      Reinstall the boot loader using the following command sequence:
     </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
    </step>
    <step performance="required">
     <para>
      Unmount the partitions, log out from the <quote>change root</quote>
      environment, and reboot the system:
     </para>
<screen>umount -a
exit
reboot</screen>
    </step>
   </procedure>
  </sect4>
  <sect4 id="sec.trouble.data.recover.rescue.dud">
   <title>Fixing Kernel Installation</title>
   <para>
    A kernel update may introduce a new bug which can impact the operation
    of your system. For example a driver for a piece of hardware in your
    system may be faulty, which prevents you from accessing and using it. In
    this case, revert to the last working kernel (if available on the
    system) or install the original kernel from the installation media.
   </para>
   <tip>
    <title>How to Keep Last Kernels after Update</title>
    <para>
     To prevent failures to boot after a faulty kernel update, use the
     kernel multiversion feature and tell <systemitem>libzypp</systemitem>
     which kernels you want to keep after the update.
    </para>
    <para>
     For example to always keep the last two kernels and the currently
     running one, add
    </para>
<screen>multiversion.kernels = latest,latest-1,running</screen>
    <para>
     to the <filename>/etc/zypp/zypp.conf</filename> file.
    </para>
   </tip>
   <para>
    A similar case is when you need to reinstall or update a broken driver
    for a device not supported by <phrase os="osuse">openSUSE</phrase>. For example when a hardware
    vendor uses a specific device, such as a hardware RAID controller, which
    needs a binary driver to be recognized by the operating system. The
    vendor typically releases a Driver Update Disk with the fixed or updated
    version of the required driver.
   </para>
   <para>
    In both cases you need to access the installed system in the rescue mode
    and fix the kernel related problem, otherwise the system may fail to
    boot correctly:
   </para>
   <procedure>
    <step performance="required">
     <para>
      Boot from the <phrase os="osuse">openSUSE</phrase> installation media.
     </para>
    </step>
    <step performance="required">
     <para>
      If you are recovering after a faulty kernel update, skip this step. If
      you need to use a driver update disk (DUD), press <keycap>F6</keycap>
      to load the driver update after the boot menu appears, and choose the
      path or URL to the driver update and confirm with
      <guimenu>Yes</guimenu>.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <guimenu>Rescue System</guimenu> from the boot menu and press
      <keycap>Enter</keycap>. If you chose to use DUD, you will be asked to
      specify where the driver update is stored.
     </para>
    </step>
    <step performance="required">
     <para>
      Enter <literal>root</literal> at the <literal>Rescue:</literal>
      prompt. A password is not required.
     </para>
    </step>
    <step performance="required">
     <para>
      Manually mount the target system and <quote>change root</quote> into
      the new environment. For more information, see
      <xref linkend="sec.trouble.data.recover.rescue.access"/>.
     </para>
    </step>
    <step performance="required">
     <para>
      If using DUD, install/reinstall/update the faulty device driver
      package. Always make sure the installed kernel version exactly matches
      the version of the driver you are installing.
     </para>
     <para>
      If fixing faulty kernel update installation, you can install the
      original kernel from the installation media with the following
      procedure.
     </para>
     <substeps performance="required">
      <step performance="required">
       <para>
        Identify your DVD device with <command>hwinfo --cdrom</command> and
        mount it with <command>mount /dev/sr0 /mnt</command>.
       </para>
      </step>
      <step performance="required">
       <para>
        Navigate to the directory where your kernel files are stored on the
        DVD, for example <command>cd /mnt/suse/x86_64/</command>.
       </para>
      </step>
      <step performance="required">
       <para>
        Install required <systemitem>kernel-*</systemitem>,
        <systemitem>kernel-*-base</systemitem>, and
        <systemitem>kernel-*-extra</systemitem> packages of your flavor with
        the <command>rpm -i</command> command.
       </para>
      </step>
      <step performance="required">
       <para>
        After the installation finishes, check that a new menu entry
        relevant for the newly installed kernel was added to the boot loader
        configuration file (<filename>/boot/grub/menu.lst</filename> for
        <systemitem>grub</systemitem>).
       </para>
      </step>
     </substeps>
    </step>
    <step performance="required">
     <para>
      Update configuration files and reinitialize the boot loader if needed.
      For more information, see
      <xref linkend="sec.trouble.data.recover.rescue.grub"/>
     </para>
    </step>
    <step performance="required">
     <para>
      Remove any bootable media from the system drive and reboot.
     </para>
    </step>
   </procedure>
  </sect4>
 </sect3>
</sect2>
