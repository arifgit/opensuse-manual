<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="grub.xml" id="cha.grub">
 <title>The Boot Loader GRUB</title><indexterm>
 <primary>booting</primary>
 <secondary>GRUB</secondary></indexterm><indexterm>
 <primary>GRUB</primary></indexterm>
 <abstract>
  <para>
   This chapter describes how to configure GRUB (Grand Unified
   Bootloader), the boot loader used in <phrase os="osuse">openSUSE®</phrase>. A special YaST
   module is available for configuring all settings. If you are not familiar
   with the subject of booting in Linux, read the following sections to
   acquire some background information. This chapter also describes some of
   the problems frequently encountered when booting with GRUB and their
   solutions.
  </para>
 </abstract>
 
 <para>
  This chapter focuses on boot management and the configuration of the boot
  loader GRUB. The boot procedure as a whole is outlined in
  <xref linkend="cha.boot"/>. A boot loader represents the interface between
  the machine (BIOS) and the operating system (<phrase os="osuse">openSUSE</phrase>). The
  configuration of the boot loader directly impacts the start of the
  operating system.
 </para>
 <para>
  The following terms appear frequently in this chapter and might need some
  explanation:
 </para>
 <variablelist>
  <varlistentry>
   <term>MBR (Master Boot Record)<indexterm>
    <primary>booting</primary>
    <secondary>boot sectors</secondary></indexterm><indexterm>
    <primary>MBR</primary></indexterm><indexterm>
    <primary>Master Boot Record</primary>
    <see>MBR</see></indexterm><indexterm>
    <primary>partitions</primary>
    <secondary>partition table</secondary></indexterm><indexterm>
    <primary>GRUB</primary>
    <secondary>Master Boot Record (MBR)</secondary></indexterm></term>
   <listitem>
    
    <para>
     The structure of the MBR is defined by an operating
     system–independent convention. The first 446 bytes are
     reserved for the program code. They typically hold part of a boot
     loader program or an operating system selector. The next 64 bytes
     provide space for a partition table of up to four entries. The
     partition table contains information about the partitioning of the hard
     disk and the file system types. The operating system needs this table
     for handling the hard disk. With conventional generic code in the MBR,
     exactly one partition must be marked <emphasis>active</emphasis>. The
     last two bytes of the MBR must contain a static <quote>magic
     number</quote> (<literal>AA55</literal>). An MBR containing a different
     value is regarded as invalid by some BIOSes, so is not considered for
     booting.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Boot Sectors<indexterm>
    <primary>booting</primary>
    <secondary>boot sectors</secondary></indexterm><indexterm>
    <primary>MBR</primary></indexterm><indexterm>
    <primary>GRUB</primary>
    <secondary>boot sectors</secondary></indexterm></term>
   <listitem>
    <para>
     Boot sectors are the first sectors of hard disk partitions with the
     exception of the extended partition, which merely serves as a
     <quote>container</quote> for other partitions. These boot sectors have
     512 bytes of space for code used to boot an operating system
     installed in the respective partition. This applies to boot sectors of
     formatted DOS, Windows, and OS/2 partitions, which also contain some
     basic important data of the file system. In contrast, the boot sectors
     of Linux partitions are initially empty after setting up a file system
     other than XFS. Therefore, a Linux partition is not bootable by itself,
     even if it contains a kernel and a valid root file system. A boot
     sector with valid code for booting the system has the same magic number
     as the MBR in its last two bytes (<literal>AA55</literal>).
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <sect1 id="sec.grub.basic">
  <title>Booting with GRUB</title><indexterm>

  <primary>GRUB</primary>

  <secondary>booting</secondary></indexterm><indexterm>

  <primary>installing</primary>

  <secondary>GRUB</secondary></indexterm><indexterm>

  <primary>booting</primary>

  <secondary>GRUB</secondary></indexterm><indexterm>

  <primary>configuring</primary>

  <secondary>GRUB</secondary></indexterm><indexterm>

  <primary>commands</primary>

  <secondary>grub</secondary></indexterm><indexterm>

  <primary>GRUB</primary>

  <secondary>commands</secondary></indexterm>

  <para>
   GRUB comprises two stages. Stage 1 consists of 512 bytes and its
   only task is to load the second stage of the boot loader. Subsequently,
   stage 2 is loaded. This stage contains the main part of the boot loader.
  </para>

  <para>
   In some configurations, an intermediate stage 1.5 can be used, which
   locates and loads stage 2 from an appropriate file system. If possible,
   this method is chosen by default on installation or when initially
   setting up GRUB with YaST.
  </para>

  <para>
   Stage 2 is able to access many file systems. Currently, ext2, ext3,
   ReiserFS, Minix, and the DOS FAT file system used by Windows are
   supported. To a certain extent, XFS, and UFS and FFS used by BSD systems
   are also supported. Since version 0.95 GRUB is also able to boot from a
   CD or DVD containing an ISO 9660 standard file system pursuant to the
   <quote>El Torito</quote> specification. Even before the system is booted,
   GRUB can access file systems of supported BIOS disk devices (floppy
   disks or hard disks, CD drives and DVD drives detected by the BIOS).
   Therefore, changes to the GRUB configuration file
   (<filename>menu.lst</filename>) do not require a new installation of the
   boot manager. When the system is booted, GRUB reloads the menu file
   with the valid paths and partition data of the kernel or the initial RAM
   disk (<literal>initrd</literal>) and locates these files.
  </para>

  <para>
   The actual configuration of GRUB is based on four files that are
   described below:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/boot/grub/menu.lst</filename>
    <indexterm>
     <primary>GRUB</primary>
     <secondary>menu.lst</secondary></indexterm></term>
    <listitem>
     <para>
      This file contains all information about partitions or operating
      systems that can be booted with GRUB. Without this information, the
      GRUB command line prompts the user for how to proceed. For details,
      see <xref linkend="sec.grub.menu.change"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/boot/grub/device.map</filename>
    <indexterm>
     <primary>GRUB</primary>
     <secondary>device.map</secondary></indexterm></term>
    <listitem>
     <para>
      This file translates device names from the GRUB and BIOS notation to
      Linux device names.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/grub.conf</filename>
    <indexterm>
     <primary>GRUB</primary>
     <secondary>grub.conf</secondary></indexterm></term>
    <listitem>
     <para>
      This file contains the commands, parameters and options the GRUB
      shell needs for installing the boot loader correctly.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/sysconfig/bootloader</filename>
    <indexterm>
     <primary>GRUB</primary>
     <secondary>sysconfig/bootloader</secondary></indexterm></term>
    <listitem>
     <para>
      This file is read by the perl-bootloader library which is used when
      configuring the bootloader with YaST and every time a new kernel is
      installed. It contains configuration options (such as kernel
      parameters) that will be added by default to the bootloader
      configuration file.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   GRUB can be controlled in various ways. Boot entries from an existing
   configuration can be selected from the graphical menu (splash screen).
   The configuration is loaded from the file <filename>menu.lst</filename>.
  </para>

  <para>
   In GRUB, all boot parameters can be changed prior to booting. For
   example, errors made when editing the menu file can be corrected in this
   way. Boot commands can also be entered interactively at a kind of input
   prompt. For details, see <xref linkend="sec.grub.menu.change"/>. GRUB
   offers the possibility of determining the location of the kernel and the
   <filename>initrd</filename> prior to booting. In this way, you can even
   boot an installed operating system for which no entry exists in the boot
   loader configuration.
  </para>

  <para>
   GRUB actually exists in two versions: as a boot loader and as a normal
   Linux program in <filename>/usr/sbin/grub</filename>. The latter is
   referred to as the <emphasis>GRUB shell</emphasis>. It provides an
   emulation of GRUB in the installed system and can be used to install
   GRUB or test new settings before applying them. The functionality to
   install GRUB as the boot loader on a hard disk or floppy disk is
   integrated in GRUB in the form of the command <command>setup</command>.
   This is available in the GRUB shell when Linux is loaded.
  </para>

  <sect2 id="sec.grub.menu">
   <title>The File <filename>/boot/grub/menu.lst</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>menu.lst</secondary></indexterm><indexterm>
   <primary>GRUB</primary>
   <secondary>boot menu</secondary></indexterm><indexterm>
   <primary>GRUB</primary>
   <secondary>menu.lst</secondary></indexterm>
   <para>
    The graphical splash screen with the boot menu is based on the GRUB
    configuration file <filename>/boot/grub/menu.lst</filename>, which
    contains all information about all partitions or operating systems that
    can be booted by the menu.
   </para>
   <para>
    Every time the system is booted, GRUB loads the menu file from the
    file system. For this reason, GRUB does not need to be reinstalled
    after every change to the file. Use the YaST boot loader to modify the
    GRUB configuration as described in
    <xref linkend="sec.boot.yast2.config"/>.
   </para>
   <para>
    The menu file contains commands. The syntax is very simple. Every line
    contains a command followed by optional parameters separated by spaces
    like in the shell. For historical reasons, some commands permit an
    <literal>=</literal> in front of the first parameter. Comments are
    introduced by a hash (<literal>#</literal>).
   </para>
   <para>
    To identify the menu items in the menu overview, set a
    <literal>title</literal> for every entry. The text (including any
    spaces) following the keyword <literal>title</literal> is displayed as a
    selectable option in the menu. All commands up to the next
    <literal>title</literal> are executed when this menu item is selected.
   </para>
   <para>
    The simplest case is the redirection to boot loaders of other operating
    systems. The command is <literal>chainloader</literal> and the argument
    is usually the boot block of another partition, in GRUB block
    notation. For example:
   </para>
<screen>chainloader (hd0,3)+1</screen>
   <para>
    The device names in GRUB are explained in
    <xref linkend="sec.grub.devices"/>. This example specifies the first
    block of the fourth partition of the first hard disk.
   </para>
   <para>
    Use the command <literal>kernel</literal> to specify a kernel image. The
    first argument is the path to the kernel image in a partition. The other
    arguments are passed to the kernel on its command line.
   </para>
   <para>
    If the kernel does not have built-in drivers for access to the root
    partition or a recent Linux system with advanced hotplug features is
    used, <filename>initrd</filename> must be specified with a separate
    GRUB command whose only argument is the path to the
    <filename>initrd</filename> file. Because the loading address of the
    <filename>initrd</filename> is written into the loaded kernel image, the
    command <literal>initrd</literal> must follow after the
    <literal>kernel</literal> command.
   </para>
   <para>
    The command <literal>root</literal> simplifies the specification of
    kernel and initrd files. The only argument of <literal>root</literal> is
    a device or a partition. This device is used for all kernel,
    <filename>initrd</filename>, or other file paths for which no device is
    explicitly specified until the next <literal>root</literal> command.
   </para>
   <para>
    The <literal>boot</literal> command is implied at the end of every menu
    entry, so it does not need to be written into the menu file. However, if
    you use GRUB interactively for booting, you must enter the
    <literal>boot</literal> command at the end. The command itself has no
    arguments. It merely boots the loaded kernel image or the specified
    chain loader.
   </para>
   <para>
    After writing all menu entries, define one of them as the
    <literal>default</literal> entry. Otherwise, the first one (entry
    <literal>0</literal>) is used. You can also specify a time-out in
    seconds after which the default entry should boot.
    <literal>timeout</literal> and <literal>default</literal> usually
    precede the menu entries. An example file is described in
    <xref linkend="sec.grub.menu.example"/>.
   </para>
   <sect3 id="sec.grub.devices">
    <title>Naming Conventions for Hard Disks and Partitions</title><indexterm>
    <primary>GRUB</primary>
    <secondary>device names</secondary></indexterm><indexterm>
    <primary>GRUB</primary>
    <secondary>partition names</secondary></indexterm>
    <para>
     The naming convention GRUB uses for hard disks and partitions differ
     from that used for normal Linux devices. It more closely resembles the
     simple disk enumeration the BIOS does and the syntax is similar to that
     used in some BSD derivatives. In GRUB, the numbering of the
     partitions start with zero. This means that
     (<filename>hd0,0</filename>) is the first partition of the first hard
     disk. On a common desktop machine with a hard disk connected as primary
     master, the corresponding Linux device name is
     <filename>/dev/sda1</filename>.
    </para>
    <para>
     The four possible primary partitions are assigned the partition numbers
     <literal>0</literal> to <literal>3</literal>. The logical partitions
     are numbered from <literal>4</literal>:
    </para>
<screen>(hd0,0)   first primary partition of the first hard disk
(hd0,1)   second primary partition
(hd0,2)   third primary partition
(hd0,3)   fourth primary partition (usually an extended partition)
(hd0,4)   first logical partition
(hd0,5)   second logical partition</screen>
    <para>
     Being dependent on BIOS devices, GRUB does not distinguish between
     PATA (IDE), SATA, SCSI, and hardware RAID devices. All hard disks
     recognized by the BIOS or other controllers are numbered according to
     the boot sequence preset in the BIOS.
    </para>
    <para>
     Unfortunately, it is often not possible to map the Linux device names
     to BIOS device names exactly. It generates this mapping with the help
     of an algorithm and saves it to the file
     <filename>device.map</filename>, which can be edited if necessary.
     Information about the file <filename>device.map</filename> is available
     in <xref linkend="sec.grub.map"/>.
    </para>
    <para>
     A complete GRUB path consists of a device name written in parentheses
     and the path to the file in the file system in the specified partition.
     The path begins with a slash. For example, the bootable kernel could be
     specified as follows on a system with a single PATA (IDE) hard disk
     containing Linux in its first partition:
    </para>
<screen>(hd0,0)/boot/vmlinuz</screen>
   </sect3>
   <sect3 id="sec.grub.menu.example">
    <title>An Example Menu File</title>
    <para>
     The following example shows the structure of a GRUB menu file. The
     example installation has a Linux boot partition under
     <filename>/dev/sda5</filename>, a root partition under
     <filename>/dev/sda7</filename> and a Windows installation under
     <filename>/dev/sda1</filename>.
    </para>
    
<screen>gfxmenu (hd0,4)/boot/message<co id="grub.menu.example.gfxmenu"/>
color white/blue black/light-gray<co id="grub.menu.example.color"/>
default 0<co id="grub.menu.example.default"/>
timeout 8<co id="grub.menu.example.timeout"/>

title linux<co id="grub.menu.example.linux"/>
   root (hd0,4)
   kernel /boot/vmlinuz root=/dev/sda7 vga=791 resume=/dev/sda9
   initrd /boot/initrd

title windows<co id="grub.menu.example.windows"/>
   rootnoverify (hd0,0)
   chainloader +1

title floppy<co id="grub.menu.example.floppy"/>
   rootnoverify (hd0,0)
   chainloader (fd0)+1

title failsafe<co id="grub.menu.example.failsafe"/>
   root (hd0,4)
   kernel /boot/vmlinuz.shipped root=/dev/sda7 ide=nodma \
   apm=off acpi=off vga=normal nosmp maxcpus=0 3 noresume
   initrd /boot/initrd.shipped</screen>
    <para>
     The first block defines the configuration of the splash screen:
    </para>
    <calloutlist>
     <callout arearefs="grub.menu.example.gfxmenu">
      <para>
       The background image <literal>message</literal> is located in the
       <filename>/boot</filename> directory of the
       <filename>/dev/sda5</filename> partition.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.color">
      <para>
       Color scheme: white (foreground), blue (background), black
       (selection) and light gray (background of the selection). The color
       scheme has no effect on the splash screen, only on the customizable
       GRUB menu that you can access by exiting the splash screen with
       <keycap>Esc</keycap>.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.default">
      <para>
       The first (<literal>0</literal>) menu entry <literal>title
       linux</literal> is booted by default.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.timeout">
      <para>
       After eight seconds without any user input, GRUB automatically
       boots the default entry. To deactivate automatic boot, delete the
       <literal>timeout</literal> line. If you set <literal>timeout
       0</literal>, GRUB boots the default entry immediately.
      </para>
     </callout>
    </calloutlist>
    <para>
     The second and largest block lists the various bootable operating
     systems. The sections for the individual operating systems are
     introduced by <literal>title</literal>.
    </para>
    <calloutlist>
     <callout arearefs="grub.menu.example.linux">
      <para>
       The first entry (<literal>title linux</literal>) is responsible for
       booting <phrase os="osuse">openSUSE</phrase>. The kernel (<literal>vmlinuz</literal>) is
       located in the first logical partition (the boot partition) of the
       first hard disk. Kernel parameters, such as the root partition and
       VGA mode, are appended here. The root partition is specified
       according to the Linux naming convention
       (<filename>/dev/sda7/</filename>) because this information is read by
       the kernel and has nothing to do with GRUB. The
       <literal>initrd</literal> is also located in the first logical
       partition of the first hard disk.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.windows">
      <para>
       The second entry is responsible for loading Windows. Windows is
       booted from the first partition of the first hard disk
       (<filename>hd0,0</filename>). The command <literal>chainloader
       +1</literal> causes GRUB to read and execute the first sector of
       the specified partition.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.floppy">
      <para>
       The next entry enables booting from floppy disk without modifying the
       BIOS settings.
      </para>
     </callout>
     <callout arearefs="grub.menu.example.failsafe">
      <para>
       The boot option <literal>failsafe</literal> starts Linux with a
       selection of kernel parameters that enables Linux to boot even on
       problematic systems.
      </para>
     </callout>
    </calloutlist>
    <para>
     The menu file can be changed whenever necessary. GRUB then uses the
     modified settings during the next boot. Edit the file permanently using
     YaST or an editor of your choice. Alternatively, make temporary
     changes interactively using the edit function of GRUB. See
     <xref linkend="sec.grub.menu.change"/>.
    </para>
   </sect3>
   <sect3 id="sec.grub.menu.change">
    <title>Editing Menu Entries during the Boot Procedure</title><indexterm>
    <primary>GRUB</primary>
    <secondary>menu editor</secondary></indexterm>
    <para>
     In the graphical boot menu, select the operating system to boot with
     the arrow keys. If you select a Linux system, you can enter additional
     boot parameters at the boot prompt. To edit individual menu entries
     directly, press <keycap>Esc</keycap> to exit the splash screen and get
     to the GRUB text-based menu then press <keycap>E</keycap>. Changes
     made in this way only apply to the current boot and are not adopted
     permanently.
    </para>
    <important>
     <title>Keyboard Layout during the Boot Procedure</title>
     <para>
      The US keyboard layout is the only one available when booting. See
      <xref linkend="fig.trouble.install.keyboard_us"/>.
     </para>
    </important>
    <para>
     Editing menu entries facilitates the repair of a defective system that
     can no longer be booted, because the faulty configuration file of the
     boot loader can be circumvented by manually entering parameters.
     Manually entering parameters during the boot procedure is also useful
     for testing new settings without impairing the native system.
    </para>
    <para>
     After activating the editing mode, use the arrow keys to select the
     menu entry of the configuration to edit. To make the configuration
     editable, press <keycap>E</keycap> again. In this way, edit incorrect
     partitions or path specifications before they have a negative effect on
     the boot process. Press <keycap>Enter</keycap> to exit the editing mode
     and return to the menu. Then press <keycap>B</keycap> to boot this
     entry. Further possible actions are displayed in the help text at the
     bottom.
    </para>
    <para>
     To enter changed boot options permanently and pass them to the kernel,
     open the file <filename>menu.lst</filename> as the user
     <systemitem class="username">root</systemitem> and append the
     respective kernel parameters to the existing line, separated by spaces:
    </para>
<screen>title linux
   root(hd0,0)
     kernel /vmlinuz root=/dev/sda3 <replaceable>additional parameter</replaceable>
   initrd /initrd</screen>
    <para>
     GRUB automatically adopts the new parameters the next time the system
     is booted. Alternatively, this change can also be made with the YaST
     boot loader module. Append the new parameters to the existing line,
     separated by spaces.
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec.grub.map">
   <title>The File device.map</title><indexterm>
   <primary>GRUB</primary>
   <secondary>device.map</secondary></indexterm>
   <para>
    The file <filename>device.map</filename> maps GRUB and BIOS device
    names to Linux device names. In a mixed system containing PATA (IDE) and
    SCSI hard disks, GRUB must try to determine the boot sequence by a
    special procedure, because GRUB may not have access to the BIOS
    information on the boot sequence. GRUB saves the result of this
    analysis in the file <filename>/boot/grub/device.map</filename>. Example
    <filename>device.map</filename> files for a system on which the boot
    sequence in the BIOS is set to PATA before SCSI could look as follows:
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/sda
(hd1)  /dev/sdb</screen>
   <para>
    or
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/disk-by-id/<replaceable>DISK1 ID</replaceable>
(hd1)  /dev/disk-by-id/<replaceable>DISK2 ID</replaceable></screen>
   <para>
    Because the order of PATA (IDE), SCSI and other hard disks depends on
    various factors and Linux is not able to identify the mapping, the
    sequence in the file <filename>device.map</filename> can be set
    manually. If you encounter problems when booting, check if the sequence
    in this file corresponds to the sequence in the BIOS and use the GRUB
    prompt to modify it temporarily, if necessary. After the Linux system
    has booted, the file <filename>device.map</filename> can be edited
    permanently with the YaST boot loader module or an editor of your
    choice.
   </para>
   
   <para>
    After manually changing <filename>device.map</filename>, execute the
    following command to reinstall GRUB. This command causes the file
    <filename>device.map</filename> to be reloaded and the commands listed
    in <filename>grub.conf</filename> to be executed:
   </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
  </sect2>

  <sect2 id="sec.grub.conf">
   <title>The File /etc/grub.conf</title><indexterm>
   <primary>configuration files</primary>
   <secondary>grub.conf</secondary></indexterm><indexterm>
   <primary>GRUB</primary>
   <secondary>grub.conf</secondary></indexterm><indexterm>
   <primary>configuring</primary>
   <secondary>GRUB</secondary></indexterm>
   <para>
    The third important GRUB configuration file after
    <filename>menu.lst</filename> and <filename>device.map</filename> is
    <filename>/etc/grub.conf</filename>. This file contains the commands,
    parameters and options the GRUB shell needs for installing the boot
    loader correctly:
   </para>
<screen>setup --stage2=/boot/grub/stage2 --force-lba (hd0,1) (hd0,1)
   quit</screen>
   <para>
    This command tells GRUB to automatically install the boot loader to
    the second partition on the first hard disk (hd0,1) using the boot
    images located on the same partition. The
    <option>--stage2=/boot/grub/stage2</option> parameter is needed to
    install the <filename>stage2</filename> image from a mounted file
    system. Some BIOSes have a faulty LBA support implementation,
    <option>--force-lba</option> provides a solution to ignore them.
   </para>
  </sect2>

  <sect2 id="sec.grub.sysconfig">
   <title>The File <filename>/etc/sysconfig/bootloader</filename></title><indexterm>
   <primary>GRUB</primary>
   <secondary>sysconfig/bootloader</secondary></indexterm>
   <para>
    This configuration file is only used when configuring the bootloader
    with YaST and every time a new kernel is installed. It is evaluated by
    the perl-bootloader library which modifies the bootloader configuration
    file (for example <filename>/boot/grub/menu.lst</filename> for GRUB)
    accordingly. <filename>/etc/sysconfig/bootloader</filename> is not a
    GRUB specific configuration file - the values are applied to any
    bootloader installed on <phrase os="osuse">openSUSE</phrase>.
   </para>
   <note>
    <title>Bootloader Configuration after a Kernel Update</title>
    <para>
     Every time a new kernel is installed, the perl bootloader writes a new
     bootloader configuration file (for example
     <filename>/boot/grub/menu.lst</filename> for GRUB) using the defaults
     specified in <filename>/etc/sysconfig/bootloader</filename>. If you are
     using a customized set of kernel parameters, make sure to adjust the
     relevant defaults in <filename>/etc/sysconfig/bootloader</filename>
     according to your needs.
    </para>
   </note>
   <variablelist>
    <varlistentry>
     <term><literal>LOADER_TYPE</literal>
     </term>
     <listitem>
      <para>
       Specifies the bootloader installed on the system (e.g. GRUB or
       LILO). Do not modify—use YaST to change the bootloader as
       described in <xref linkend="pro.boot.yast2.config.loader"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_VGA / FAILSAFE_VGA / XEN_VGA</literal>
     </term>
     <listitem>
      <para>
       Screen resolution and color depth of the framebuffer used during
       booting are configured with the kernel parameter
       <literal>vga</literal>. These values define which resolution and
       color depth to use for the default boot entry, the failsafe and the
       XEN entry. The following values are valid:
      </para>
      <table>
       <title>Screen Resolution and Color Depth Reference</title>
       <tgroup cols="6">
        <thead>
         <row>
          <entry>
           <para/>
          </entry>
          <entry>
           <para>
            640x480
           </para>
          </entry>
          <entry>
           <para>
            800x600
           </para>
          </entry>
          <entry>
           <para>
            1024x768
           </para>
          </entry>
          <entry>
           <para>
            1280x1024
           </para>
          </entry>
          <entry>
           <para>
            1600x1200
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            8bit
           </para>
          </entry>
          <entry>
           <para>
            0x301
           </para>
          </entry>
          <entry>
           <para>
            0x303
           </para>
          </entry>
          <entry>
           <para>
            0x305
           </para>
          </entry>
          <entry>
           <para>
            0x307
           </para>
          </entry>
          <entry>
           <para>
            0x31C
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            15bit
           </para>
          </entry>
          <entry>
           <para>
            0x310
           </para>
          </entry>
          <entry>
           <para>
            0x313
           </para>
          </entry>
          <entry>
           <para>
            0x316
           </para>
          </entry>
          <entry>
           <para>
            0x319
           </para>
          </entry>
          <entry>
           <para>
            0x31D
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            16bit
           </para>
          </entry>
          <entry>
           <para>
            0x311
           </para>
          </entry>
          <entry>
           <para>
            0x314
           </para>
          </entry>
          <entry>
           <para>
            0x317
           </para>
          </entry>
          <entry>
           <para>
            0x31A
           </para>
          </entry>
          <entry>
           <para>
            0x31E
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            24bit
           </para>
          </entry>
          <entry>
           <para>
            0x312
           </para>
          </entry>
          <entry>
           <para>
            0x315
           </para>
          </entry>
          <entry>
           <para>
            0x318
           </para>
          </entry>
          <entry>
           <para>
            0x31B
           </para>
          </entry>
          <entry>
           <para>
            0x31F
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_APPEND / FAILSAFE_APPEND / XEN_KERNEL_APPEND</literal>
     </term>
     <listitem>
      <para>
       Kernel parameters (other than <literal>vga</literal>) that are
       automatically appended to the default, failsafe and XEN boot entries
       in the bootloader configuration file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>CYCLE_DETECTION / CYCLE_NEXT_ENTRY</literal>
     </term>
     <listitem>
      <para>
       Configure whether to use boot cycle detection and if so, which
       alternative entry from <filename>/boot/grub/menu.lst</filename> to
       boot in case of a reboot cycle (e.g.
       <systemitem>Failsafe</systemitem>). See
       <filename>/usr/share/doc/packages/bootcycle/README</filename> for
       detailed information.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.grub.password">
   <title>Setting a Boot Password</title><indexterm>
   <primary>GRUB</primary>
   <secondary>boot password</secondary></indexterm>
   <para>
    Even before the operating system is booted, GRUB enables access to
    file systems. Users without root permissions can access files in your
    Linux system to which they have no access once the system is booted. To
    block this kind of access or to prevent users from booting certain
    operating systems, set a boot password.
   </para>
   <important>
    <title>Boot Password and Splash Screen</title>
    <para>
     If you use a boot password for GRUB, the usual splash screen is not
     displayed.
    </para>
   </important>
   <para>
    As the user <literal>root</literal>, proceed as follows to set a boot
    password:
   </para>
   <procedure>
    <step performance="required">
     <para>
      At the root prompt, encrypt the password using grub-md5-crypt:
     </para>
<screen># grub-md5-crypt
Password: ****
Retype password: ****
Encrypted: $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
    </step>
    <step performance="required">
     <para>
      Paste the encrypted string into the global section of the file
      <filename>menu.lst</filename>:
     </para>
<screen>gfxmenu (hd0,4)/message
color white/blue black/light-gray
default 0
timeout 8
password --md5 $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
     <para>
      Now GRUB commands can only be executed at the boot prompt after
      pressing <keycap>P</keycap> and entering the password. However, users
      can still boot all operating systems from the boot menu.
     </para>
    </step>
    <step performance="required">
     <para>
      To prevent one or several operating systems from being booted from the
      boot menu, add the entry <literal>lock</literal> to every section in
      <filename>menu.lst</filename> that should not be bootable without
      entering a password. For example:
     </para>
<screen>title linux
   kernel (hd0,4)/vmlinuz root=/dev/sda7 vga=791
   initrd (hd0,4)/initrd
   lock</screen>
     <para>
      After rebooting the system and selecting the Linux entry from the boot
      menu, the following error message is displayed:
     </para>
<screen>Error 32: Must be authenticated</screen>
     <para>
      Press <keycap>Enter</keycap> to enter the menu. Then press
      <keycap>P</keycap> to get a password prompt. After entering the
      password and pressing <keycap>Enter</keycap>, the selected operating
      system (Linux in this case) should boot.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="grub_yast_i.xml" parse="xml"/>
 <sect1 id="sec.grub.entfernen">
  <title>Uninstalling the Linux Boot Loader</title><indexterm>

  <primary>uninstalling</primary>

  <secondary>GRUB</secondary></indexterm><indexterm>

  <primary>uninstalling</primary>

  <secondary>Linux</secondary></indexterm><indexterm>

  <primary>GRUB</primary>

  <secondary>uninstalling</secondary></indexterm><indexterm>

  <primary>Linux</primary>

  <secondary>uninstalling</secondary></indexterm>

  <para>
   YaST can be used to uninstall the Linux boot loader and restore the MBR
   to the state it had prior to the installation of Linux. During the
   installation, YaST automatically creates a backup copy of the original
   MBR and restores it upon request.
  </para>

  <para>
   To uninstall GRUB, start YaST and click <menuchoice>
   <guimenu>System</guimenu> <guimenu>Boot Loader</guimenu> </menuchoice> to
   start the boot loader module. Select <menuchoice>
   <guimenu>Other</guimenu> <guimenu>Restore MBR of Hard Disk</guimenu>
   </menuchoice> and confirm with <guimenu>Yes, Rewrite</guimenu>.
  </para>
 </sect1>
 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="grub_bootcd_i.xml" parse="xml"/>
 <sect1 id="sec.boot.screen">
  <title>The Graphical SUSE Screen</title><indexterm>

  <primary>booting</primary>

  <secondary>graphic</secondary></indexterm><indexterm>

  <primary>consoles</primary>

  <secondary>graphical</secondary></indexterm>

  <para>
   The graphical SUSE screen is displayed on the first console if the
   option <option>vga=<replaceable>value</replaceable></option> is used as a
   kernel parameter. If you install using YaST, this option is
   automatically activated in accordance with the selected resolution and
   the graphics card. There are three ways to disable the SUSE screen, if
   desired:
  </para>

  <variablelist>
   <varlistentry>
    <term>Disabling the SUSE Screen When Necessary</term>
    <listitem>
     <para>
      Enter the command <command>echo 0 &gt;/proc/splash</command> on the
      command line to disable the graphical screen. To activate it again,
      enter <command>echo 1 &gt;/proc/splash</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disabling the SUSE screen by default</term>
    <listitem>
     <para>
      Add the kernel parameter <option>splash=0</option> to your boot loader
      configuration. <xref linkend="cha.grub"/> provides more information
      about this. However, if you prefer the text mode (the default in
      earlier versions) set <option>vga=normal</option>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Completely Disabling the SUSE Screen</term>
    <listitem>
     <para>
      Compile a new kernel and disable the option <guimenu>Use splash screen
      instead of boot logo</guimenu> in <guimenu>framebuffer
      support</guimenu>. Disabling framebuffer support in the kernel
      automatically disables the splash screen, as well.
     </para>
     <warning>
      <title>No Support</title>
      <para>
       SUSE cannot provide any support for your system if you run it with
       a custom kernel.
      </para>
     </warning>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.grub.probs">
  <title>Troubleshooting</title><indexterm>

  <primary>GRUB</primary>

  <secondary>troubleshooting</secondary></indexterm>

  <para>
   This section lists some of the problems frequently encountered when
   booting with GRUB and a short description of possible solutions. Some
   of the problems are covered in articles in the
   <phrase os="osuse">Support
   Database at
   <ulink url="http://en.opensuse.org/Portal:Support_database"/></phrase>.
   Use the search dialog to search for keywords like
   <emphasis>GRUB</emphasis>, <emphasis>boot</emphasis> and <emphasis>boot
   loader</emphasis>.
  </para>

  <variablelist>
   <varlistentry>
    <term>GRUB and XFS</term>
    <listitem>
     <para>
      XFS leaves no room for <filename>stage1</filename> in the partition
      boot block. Therefore, do not specify an XFS partition as the location
      of the boot loader. This problem can be solved by creating a separate
      boot partition that is not formatted with XFS.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>GRUB Reports GRUB Geom Error<indexterm>
     <primary>GRUB</primary>
     <secondary>GRUB Geom Error</secondary></indexterm></term>
    <listitem>
     <para>
      GRUB checks the geometry of connected hard disks when the system is
      booted. Sometimes, the BIOS returns inconsistent information and
      GRUB reports a GRUB Geom Error. In this case, update the BIOS.
     </para>
     <para>
      GRUB also returns this error message if Linux was installed on an
      additional hard disk that is not registered in the BIOS.
      <emphasis>stage1</emphasis> of the boot loader is found and loaded
      correctly, but <emphasis>stage2</emphasis> is not found. This problem
      can be remedied by registering the new hard disk in the BIOS.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>System Containing Several Hard Disks Does Not Boot</term>
    <listitem>
     <para>
      During the installation, YaST may have incorrectly determined the
      boot sequence of the hard disks. For example, GRUB may regard the
      PATA (IDE) disk as <filename>hd0</filename> and the SCSI disk as
      <filename>hd1</filename>, although the boot sequence in the BIOS is
      reversed (SCSI <emphasis>before</emphasis> PATA).
     </para>
     <para>
      In this case, correct the hard disks during the boot process with the
      help of the GRUB command line. After the system has booted, edit
      <filename>device.map</filename> to apply the new mapping permanently.
      Then check the GRUB device names in the files
      <filename>/boot/grub/menu.lst</filename> and
      <filename>/boot/grub/device.map</filename> and reinstall the boot
      loader with the following command:
     </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Booting Windows from the Second Hard Disk</term>
    <listitem>
     <para>
      Some operating systems, such as Windows, can only boot from the first
      hard disk. If such an operating system is installed on a hard disk
      other than the first hard disk, you can effect a logical change for
      the respective menu entry.
     </para>
<screen>...
title windows
   map (hd0) (hd1)
   map (hd1) (hd0)
   chainloader(hd1,0)+1
...</screen>
     <para>
      In this example, Windows is started from the second hard disk. For
      this purpose, the logical order of the hard disks is changed with
      <literal>map</literal>. This change does not affect the logic within
      the GRUB menu file. Therefore, the second hard disk must be
      specified for <literal>chainloader</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.grub.info">
  <title>For More Information</title>

  <para>
   Extensive information about GRUB is available at
   <ulink url="http://www.gnu.org/software/grub/"/>. Also refer to the
   <command>grub</command> info page. <phrase os="osuse">You can also search
   for the keyword <quote>GRUB</quote> in the Support Database at
   <ulink url="http://en.opensuse.org/Portal:Support_database"/> to get
   information about special issues.</phrase>
  </para>
 </sect1>
</chapter>
