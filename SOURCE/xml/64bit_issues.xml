<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="64bit_issues.xml" id="cha.64bit">
 <title>32-Bit and 64-Bit Applications in a 64-Bit System Environment</title><indexterm>
 <primary>64-bit Linux</primary></indexterm>
 <para>
  <phrase os="osuse">openSUSEÂ®</phrase> is available for 
  64-bit platforms. This does not necessarily mean that all the applications
  included have already been ported to 64-bit platforms. <phrase os="osuse">openSUSE</phrase>
  supports the use of 32-bit applications in a 64-bit system environment.
  This chapter offers a brief overview of how this support is implemented on
  64-bit <phrase os="osuse">openSUSE</phrase> platforms. It explains how 32-bit applications are
  executed (runtime support) and how 32-bit applications should be compiled
  to enable them to run both in 32-bit and 64-bit system environments.
  Additionally, find information about the kernel API and an explanation of
  how 32-bit applications can run under a 64-bit kernel.
 </para>
 <para>
  <phrase os="osuse;sled"><phrase os="osuse">openSUSE</phrase> for the
  64-bit platforms amd64 and Intel 64</phrase> is designed so that existing
  32-bit applications run in the 64-bit environment
  <quote>out-of-the-box.</quote> 
  This support means that you can continue to use your preferred 32-bit
  applications without waiting for a corresponding 64-bit port to become
  available.
 </para>
 <sect1 id="sec.64bit.runt">
  <title>Runtime Support</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>runtime support</secondary></indexterm>

  <important>
   <title>Conflicts between Application Versions</title>
   <para>
    If an application is available both for 32-bit and 64-bit environments,
    parallel installation of both versions is bound to lead to problems. In
    such cases, decide on one of the two versions and install and use this.
   </para>
   <para>
    An exception to this rule is PAM (pluggable authentication modules).
    <phrase os="osuse">openSUSE</phrase> uses PAM in the authentication process as a layer that
    mediates between user and application. On a 64-bit operating system that
    also runs 32-bit applications it is necessary to always install both
    versions of a PAM module.
   </para>
  </important>

  <para>
   To be executed correctly, every application requires a range of
   libraries. Unfortunately, the names for the 32-bit and 64-bit versions of
   these libraries are identical. They must be differentiated from each
   other in another way.
  </para>

  <para>
   To retain compatibility with the 32-bit version, the libraries are stored
   at the same place in the system as in the 32-bit environment. The 32-bit
   version of <filename>libc.so.6</filename> is located under
   <filename>/lib/libc.so.6</filename> in both the 32-bit and 64-bit
   environments.
  </para>

  <para>
   All 64-bit libraries and object files are located in directories called
   <filename>lib64</filename>. The 64-bit object files that you would
   normally expect to find under <filename>/lib</filename> and
   <filename>/usr/lib</filename> are now found under
   <filename>/lib64</filename> and <filename>/usr/lib64</filename>. This
   means that there is space for the 32-bit libraries under
   <filename>/lib</filename> and <filename>/usr/lib</filename>, so the
   filename for both versions can remain unchanged.
  </para>

  <para>
   Subdirectories of 32-bit <filename>/lib</filename> directories which
   contain data content that does not depend on the word size are not moved.
   This scheme conforms to LSB (Linux Standards Base) and FHS (File System
   Hierarchy Standard).
  </para>

  
 </sect1>
 <sect1 id="sec.64bit.devel">
  <title>Software Development</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>software development</secondary></indexterm>

  

  

  <para os="osuse;sled">
   A biarch development tool chain allows generation of 32-bit and 64-bit
   objects. The default is to compile 64-bit objects. It is possible to
   generate 32-bit objects by using special flags. For GCC, this special
   flag is <option>-m32</option>.
  </para>

  <para>
   All header files must be written in an architecture-independent form. The
   installed 32-bit and 64-bit libraries must have an API (application
   programming interface) that matches the installed header files. The
   normal <phrase os="osuse">openSUSE</phrase> environment is designed according to this principle.
   In the case of manually updated libraries, resolve these issues yourself.
  </para>
 </sect1>
 <sect1 id="sec.64bit.biarch">
  <title>Software Compilation on Biarch Platforms</title>

  <para>
   To develop binaries for the other architecture on a biarch architecture,
   the respective libraries for the second architecture must additionally be
   installed. These packages are called
   <systemitem class="resource">rpmname-32bit</systemitem>. You also need the
   respective headers and libraries from the
   <systemitem class="resource">rpmname-devel</systemitem> packages and
   the development libraries for the second architecture from
   <systemitem class="resource">rpmname-devel-32bit</systemitem>.
  </para>

  

  

  <para>
   Most open source programs use an <command>autoconf</command>-based
   program configuration. To use <command>autoconf</command> for configuring
   a program for the second architecture, overwrite the normal compiler and
   linker settings of <command>autoconf</command> by running the
   <command>configure</command> script with additional environment
   variables.
  </para>

  <para>
   The following example refers to an x86_64 system with x86 as the second
   architecture. 
  </para>

  <procedure>
   <step performance="required">
    <para>
     Use the 32-bit compiler:
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Instruct the linker to process 32-bit objects (always use
     <command>gcc</command> as the linker front-end):
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Set the assembler to generate 32-bit objects:
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Specify linker flags, such as the location of 32-bit libraries, for
     example:
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step performance="required">
    <para>
     Specify the location for the 32-bit object code libraries:
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step performance="required">
    <para>
     Specify the location for the 32-bit X libraries:
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   Not all of these variables are needed for every program. Adapt them to
   the respective program.
  </para>

  

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 id="sec.64bit.kernel">
  <title>Kernel Specifications</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>kernel specifications</secondary></indexterm>

  <para>
   The 64-bit kernels for x86_64 offer both a 64-bit and a 32-bit kernel ABI
   (application binary interface). The latter is identical with the ABI for
   the corresponding 32-bit kernel. This means that the 32-bit application
   can communicate with the 64-bit kernel in the same way as with the 32-bit
   kernel.
  </para>

  <para>
   The 32-bit emulation of system calls for a 64-bit kernel does not support
   all the APIs used by system programs. This depends on the platform. For
   this reason, a small number of applications, like
   <command>lspci</command>, must be compiled.
  </para>

  <para>
   A 64-bit kernel can only load 64-bit kernel modules that have been
   specially compiled for this kernel. It is not possible to use 32-bit
   kernel modules.
  </para>

  <tip>
   <title>Kernel-loadable Modules</title>
   <para>
    Some applications require separate kernel-loadable modules. If you
    intend to use such a 32-bit application in a 64-bit system environment,
    contact the provider of this application and SUSE to make sure that
    the 64-bit version of the kernel-loadable module and the 32-bit compiled
    version of the kernel API are available for this module.
   </para>
  </tip>
 </sect1>
</chapter>
