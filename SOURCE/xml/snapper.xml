<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="snapper.xml" id="cha.snapper">
 <title>Snapshots/Rollback with Snapper</title>
 <abstract>
  <para>
   Being able to do file system snapshots on Linux providing the ability to do
   rollbacks is a feature that was often requested in the past. Snapper, in
   conjunction with the <literal>Btrfs</literal> file system now fills that
   gap.
  </para>
  <para>
   <literal>Btrfs</literal>, a new copy-on-write file system for Linux,
   supports file system snapshots (a copy of the state of a subvolume at a
   certain point of time) of subvolumes (one or more separately mountable file
   systems within each physical partition). Snapper lets you manage these
   snapshots. Snapper comes with a command line and a YaST interface.
  </para>
  <para>
   By default Snapper and <literal>Btrfs</literal> on <phrase os="osuse">openSUSE</phrase> are set up
   to serve as an <quote>undo tool</quote> for system changes made with YaST
   and zypper. Before and after running a YaST module or zypper, a snapshot
   is created. Snapper lets you compare the two snapshots and provides means
   to revert the differences between the two snapshots. The tools also provide
   system backups by creating hourly snapshots of the system subvolumes. 
  </para>
 </abstract>
 
 <sect1 id="sec.snapper.requirements">
  <title>Requirements</title>
  <para>
   Since <literal>Btrfs</literal> is the only filesystem on <phrase os="osuse">openSUSE</phrase>
   supporting snapshots, it is required on all partitions or subvolumes you
   want to <quote>snapshot</quote>. 
  </para>
    <sect2 id="sec.snapper.requires.diskspace">
   <title>snapshots and Disk Space</title>
   <para>
    When a snapshot is created, both the snapshot and the original point to
    the same blocks in the file system. So, initially a snapshot does not
    occupy additional disk space. If data in the original file system is
    modified, changed data blocks are copied while the old data blocks are
    kept for the snapshot. Therefore, a snapshot occupies the same
    amount of space as the data modified. So, over time, the amount of space a
    snapshot allocates, constantly grows. As a consequence, deleting files
    from a <literal>Btrfs</literal> file system containing snapshots may
    <emphasis>not</emphasis> free disk space!
   </para>
   
   <note>
    <title>Snapshot Location</title>
    <para>
     Snapshots always reside on the same partition or subvolume that has been
     snapshotted. It is not possible to store snapshots on a different
     partition or subvolume.
    </para>
   </note>
   
   <para>
    As a result, partitions containing snapshots need to be larger than
    <quote>normal</quote> partitions. The exact amount strongly depends on the
    number of snapshots you keep and the amount of data modifications. As a
    rule of thumb you should consider using twice the size than you normally
    would. 
   </para>
   <tip>
    <title>Freeing space / Disk Usage</title>
    <para>
     In order to free space on a <literal>Btrfs</literal> partition containing
     snapshots you need to delete unneeded snapshots rather than files. Older
     snapshots occupy more space than recent ones.
    </para>
    <para>
     Since the <command>df</command> does not show the correct disk usage on
     <literal>Btrfs</literal> file systems, you need to use the command
     <command>btrfs filesystem df
      <replaceable>MOUNT_POINT</replaceable></command>. Displaying the amount
     of disk space a snapshot allocates is currently not supported by the 
     <literal>Btrfs</literal> tools.
    </para>
   </tip>
  </sect2>
 </sect1>
 
 <sect1 id="sec.snapper.yast">
  <title>Using Snapper to Undo YaST and zypper Changes</title>
  <para>
   If you set up the root partition with <literal>Btrfs</literal> during the
   installation, Snapper—pre-configured for doing rollbacks of YaST or
   zypper changes—will automatically be installed. Every time you start
   a YaST module or a zypper transaction, two snapshots are created: a
   <quote>pre-snapshot</quote> capturing the state of the filesystem before
   the start of the module and a <quote>post-snapshot</quote> after the module
   has been finished.
  </para>
  <para>
   Using the YaST Snapper module or the <command>snapper</command> command
   line tool, you can undo the changes made by YaST/zypper by restoring
   files from the <quote>pre-snapshot</quote>. Comparing two snapshots the
   tools also allow you to see which files have been changed. You can also
   display the differences between two versions of a file (diff).
  </para>
  <para>
   Since Linux is a multitasking system, processes other than YaST or zypper
   may modify data in the timeframe between the pre- and the
   post-snapshot. If this is the case, completely reverting to the
   pre-snapshot will also undo these changes by other processes. In most cases
   this would be unwanted—therefore it is strongly recommended to
   closely review the changes between two snapshots before starting the
   rollback. If there are changes from other processes you want to keep,
   select which files to roll back.
  </para>
  <important>
   <title>Limitations</title>
   <para>
    Make sure you know about Snapper's limitations before attempting to use
    its rollback mechanism. See <xref linkend="sec.snapper.limits"/> for
    details. 
   </para>
  </important>
  
  <note>
   <title>Storage Time of Snapshots</title>
   <para>
    By default, the last 100 YaST and zypper snappshots are being kept. If
    this number is exceeded, the oldest snapshot(s) will be deleted.
   </para>
  </note>
  
  <procedure id="proc.snapper.yast.yast">
   <title>
    Undoing changes using the YaST <guimenu>Snapper</guimenu> module
   </title>
   <step performance="required">
    <para>
     Start the <guimenu>Snapper</guimenu> module from the
     <guimenu>Miscellaneous</guimenu> section in YaST or by entering
     <command>yast2 snapper</command>.
    </para>
   </step>
   <step performance="required">
    <para>
     Make sure <guimenu>Current Configuration</guimenu> is set to
     <guimenu>root</guimenu>. This is always the case unless you have manually
     added own Snapper configurations.
    </para>
   </step>
   <step performance="required">
    <para>
     Choose a pair of pre- and post-snapshots from the list. Both, YaST and
     zypper snapshot pairs are of the type <guimenu>Pre &amp;
      Post</guimenu>. YaST snapshots are labeled as <literal>yast
      <replaceable>module_name</replaceable></literal> in the
     <guimenu>Description column</guimenu>; zypper snapshots are labeled
     <literal>zypp (zypper)</literal>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="snapper_yast2_list.png" width="75%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="snapper_yast2_list.png" width="75%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step performance="required">
    <para>
     Click <guimenu>Show Changes</guimenu> to open the list of files that
     differ between the two snapshots. The following image shows a list of
     files that have changed after having added the user <systemitem class="username">tester</systemitem>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="snapper_yast2_changes.png" width="75%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="snapper_yast2_changes.png" width="75%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step performance="required">
    <para>
     Review the list of files. To display a <quote>diff</quote> between the
     pre- and post-version of a file, select it from the list. The following
     images shows the changes to <filename>/etc/passwd</filename> after having
     added the user <systemitem class="username">tester</systemitem>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="snapper_yast2_diff.png" width="65%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="snapper_yast2_diff.png" width="75%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step performance="required">
    <para>
     To restore a set of files, select the relevant files or directories by
     ticking the respective checkbox. Click <guimenu>Restore
      Selected</guimenu> and confirm the action by clicking
     <guimenu>Yes</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="snapper_yast2_restore.png" width="75%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="snapper_yast2_restore.png" width="75%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
    <para>
     To restore a single file, activate its diff view by clicking on its
     name. Click <guimenu>Restore From First</guimenu> and confirm your choice
     with <guimenu>Yes</guimenu>.  
    </para>    
   </step>
  </procedure>
  <procedure id="proc.snapper.yast.cmdline">
   <title>
    Undoing changes using the <command>snapper</command> command
   </title>
   <step performance="required">
    <para>
     Get a list of yast and zypper snapshots by running <command>snapper list
      <option>-t pre-post</option></command>. YaST snapshots are labeled as
     <literal>yast <replaceable>module_name</replaceable></literal> in the
     <guimenu>Description column</guimenu>; zypper snapshots are labeled
     <literal>zypp (zypper)</literal>.
    </para>
    <screen><?dbsuse-fo font-size="0.60em"?>
~ # snapper list -t pre-post
Pre # | Post # | Pre Date                 | Post Date                | Description
------+--------+--------------------------+--------------------------+----------------------+
4     | 5      | Tue Jan 10 14:39:14 2012 | Tue Jan 10 14:39:33 2012 | yast system_settings
65    | 66     | Thu Jan 12 17:18:10 2012 | Thu Jan 12 17:18:23 2012 | zypp(zypper)
68    | 69     | Thu Jan 12 17:25:46 2012 | Thu Jan 12 17:27:09 2012 | zypp(zypper)
73    | 74     | Thu Jan 12 17:32:55 2012 | Thu Jan 12 17:33:13 2012 | yast system_settings
75    | 76     | Thu Jan 12 17:33:56 2012 | Thu Jan 12 17:34:42 2012 | yast users
77    | 92     | Thu Jan 12 17:38:36 2012 | Thu Jan 12 23:13:13 2012 | yast snapper
83    | 84     | Thu Jan 12 22:10:33 2012 | Thu Jan 12 22:10:39 2012 | zypp(zypper)
85    | 86     | Thu Jan 12 22:16:58 2012 | Thu Jan 12 22:17:09 2012 | zypp(zypper)
88    | 89     | Thu Jan 12 23:10:42 2012 | Thu Jan 12 23:10:46 2012 | zypp(zypper)
90    | 91     | Thu Jan 12 23:11:40 2012 | Thu Jan 12 23:11:42 2012 | zypp(zypper)
108   | 109    | Fri Jan 13 13:01:06 2012 | Fri Jan 13 13:01:10 2012 | zypp(zypper)
</screen>
   </step>
   <step performance="required">
    <para>
     Get a list of changed files for a snapshot pair with <command>snapper
      status
      <replaceable>PRE</replaceable>..<replaceable>POST</replaceable></command>. 
     Files with content changes are marked with <guimenu>c</guimenu>, files
     that have been added are marked with <guimenu>+</guimenu> and deleted
     files are marked with <guimenu>-</guimenu>. The following example shows a
     snapshot pair for the installation of the package <systemitem class="resource">ncftp</systemitem>.
    </para>
    <screen>~ # snapper status 108..109
+... /usr/bin/ncftp
+... /usr/bin/ncftpbatch
+... /usr/bin/ncftpget
+... /usr/bin/ncftpls
[...]
+... /usr/share/man/man1/ncftpspooler.1.gz
c... /var/cache/zypp/solv/@System/cookie
c... /var/cache/zypp/solv/@System/solv
c... /var/lib/rpm/Basenames
c... /var/lib/rpm/Dirnames
c... /var/lib/rpm/Filemd5s
c... /var/lib/rpm/Group
c... /var/lib/rpm/Installtid
c... /var/lib/rpm/Name
c... /var/lib/rpm/Packages
c... /var/lib/rpm/Providename
c... /var/lib/rpm/Provideversion
c... /var/lib/rpm/Requirename
c... /var/lib/rpm/Requireversion
c... /var/lib/rpm/Sha1header
c... /var/lib/rpm/Sigmd5
c... /var/lib/zypp/SoftLocks</screen>
   </step>
   <step performance="required">
    <para>
     To display the diff for a certain file, run <command>snapper
      diff <replaceable>PRE</replaceable>..<replaceable>POST</replaceable>
      <replaceable>FILENAME</replaceable></command>. If you do not specify
     <replaceable>FILENAME</replaceable>, a diff for all files will be
     displayed.
    </para>
    <screen>~ # snapper diff 108..109 /var/lib/zypp/SoftLocks
--- /.snapshots/108/snapshot/var/lib/zypp/SoftLocks	2012-01-12 23:15:22.408009164 +0100
+++ /.snapshots/109/snapshot/var/lib/zypp/SoftLocks	2012-01-13 13:01:08.724009131 +0100
@@ -1,4 +1,2 @@
-# zypp::SoftLocksFile generated Thu Jan 12 23:10:46 2012
-#
-ncftp
-#
+# zypp::SoftLocksFile generated Fri Jan 13 13:01:08 2012
+##</screen>
   </step>
   <step performance="required">
    <para>
     To restore one or more files run <command>snapper -v
      undochange <replaceable>PRE</replaceable>..<replaceable>POST</replaceable>
      <replaceable>FILENAMES</replaceable></command>. If you do not specify a
     <replaceable>FILENAMES</replaceable>, all changed files will be restored.
    </para>
    <screen>~ # snapper -v undochange 108..109
create:0 modify:16 delete:21
undoing change...
deleting /usr/share/man/man1/ncftpspooler.1.gz
deleting /usr/share/man/man1/ncftpput.1.gz
[...]
deleting /usr/bin/ncftpls
deleting /usr/bin/ncftpget
deleting /usr/bin/ncftpbatch
deleting /usr/bin/ncftp
modifying /var/cache/zypp/solv/@System/cookie
modifying /var/cache/zypp/solv/@System/solv
modifying /var/lib/rpm/Basenames
modifying /var/lib/rpm/Dirnames
modifying /var/lib/rpm/Filemd5s
modifying /var/lib/rpm/Group
modifying /var/lib/rpm/Installtid
modifying /var/lib/rpm/Name
modifying /var/lib/rpm/Packages
modifying /var/lib/rpm/Providename
modifying /var/lib/rpm/Provideversion
modifying /var/lib/rpm/Requirename
modifying /var/lib/rpm/Requireversion
modifying /var/lib/rpm/Sha1header
modifying /var/lib/rpm/Sigmd5
modifying /var/lib/zypp/SoftLocks
undoing change done</screen>
   </step>
  </procedure>
 </sect1>

 <sect1 id="sec.snapper.backup">
  <title>Using Snapper to Restore Files from Hourly Backups</title>
  <para>
   Apart from the YaST and zypper snapshots, Snapper creates hourly
   snapshots of the system partition (<filename>/</filename>). You can use these
   backup snapshots to restore files that have accidentally been deleted or
   modified beyond recovery. By making use of Snapper's diff feature you can
   also find out which modifications have been made at a certain point of time. 
  </para>
  <para>
   Hourly backup snapshots are of the type <literal>Single</literal> and are
   marked with the description <literal>timeline</literal>. To restore files
   from these snapshots proceed as described in <xref linkend="proc.snapper.yast.yast"/> or <xref linkend="proc.snapper.yast.cmdline"/>
  </para>
    <note>
   <title>Storage Time of Snapshots</title>
   <para>
    By default, the last ten snapshots of each day are kept. Furthermore ten
    snapshots are kept for the last ten days, months, and years. For details
    see <xref linkend="ex.snapper.config.timeline"/>.
   </para>
  </note>
 </sect1>
 
 <sect1 id="sec.snapper.manage">
  <title>Managing Snapshots</title>
  <para>
   With Snapper you can not only create and delete snapshots, but also set and
   modify the metadata. All Snapper operations are carried out for a certain
   configuration. If you do not specify a configuration, the default one
   (<literal>root</literal>) is used. If you want to manage snapshots for your
   own configuration (see <xref linkend="sec.snapper.config"/> for details),
   you need to specify it with the global <command>snapper</command> option
   <option>-c</option>:
  </para>
  <screen>snapper -c myconfig list</screen>
  <para>
   For details on <command>snapper</command> refer to its manpage
   (<command>man 1 snapper</command>).
  </para>
  <sect2 id="sec.snapper.manage.metadata">
   <title>Snapshot Metadata</title>
   <para>
    Each snapshot consists of the snapshot itself and some metadata. With
    Snapper you can set and modify some metadata. The following metadata is
    available for each snapshot:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <emphasis role="bold">Type</emphasis>: Snapshot type, see <xref linkend="sec.snapper.manage.metadata.type"/> for details. This data can
      not be changed.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Number</emphasis>: Unique number of the snapshot.
      This data can not be changed.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Pre Number</emphasis>: Specifies the number of the
      corresponding pre snapshot. For snapshots of type post only.  This data
      can not be changed.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Description</emphasis>: A description of the
      snapshot.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Userdata</emphasis>: An extended description where
      you can specify custom data in the form or comma-separated key=value
      list: <literal>reason=testing_stuff, user=tux</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis role="bold">Cleanup-Algorithm</emphasis>: Cleanup-algorithm for
      the snapshot
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec.snapper.manage.metadata.type">
    <title>Snapshot Types</title>
    <para>
     Snapper knows three different types of snapshots: pre, post and
     single. Physically they do not differ, but Snapper handles them
     differently.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>pre</literal></term>
      <listitem>
       <para>
        Snapshot of a filesystem <emphasis>before</emphasis> a modification.
        Each <literal>pre</literal> snapshot has got a corresponding
        <literal>post</literal> snapshot. Used e.g. for the automatic
        YaST/zypper snapshots.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>post</literal></term>
      <listitem>
       <para>
        Snapshot of a filesystem <emphasis>after</emphasis> a modification.
        Each <literal>post</literal> snapshot has got a corresponding
        <literal>pre</literal> snapshot. Used e.g. for the automatic
        YaST/zypper snapshots.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>single</term>
      <listitem>
       <para>
        Stand-alone snapshot. Used e.g. for the automatic hourly
        snapshots. This is the default type when crating snapshots.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   
   <sect3 id="sec.snapper.manage.metadata.cleanup">
    <title>Cleanup-algorithms</title>
    <para>
     Snapper provides three algorithms to cleanup old snapshots. The
     algorithms are executed in a daily cron-job. The cleanup-frequency itself
     is defined in the Snapper configuration for the partition or subvolume
     (see <xref linkend="sec.snapper.config.modify"/> for details).
    </para>
    <variablelist>
     <varlistentry>
      <term>number</term>
      <listitem>
       <para>
        Deletes old snapshots when a certain snapshot count is reached.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>timeline</term>
      <listitem>
       <para>
        Deletes old snapshots having passed a certain age, but keeps a number
        of hourly, daily, monthly and yearly snapshots.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>empty-pre-post</term>
      <listitem>
       <para>
        Deletes pre/post snapshot pairs with empty diffs.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 id="sec.snapper.manage.create">
   <title>Creating Snapshots</title>
   <para>
    Creating a snapshot is done by running <command>snapper
     create</command>. You should always specify a meaningful description with
    <option>-d</option> in order to later be able to identify its purpose.
   </para>
   <para>
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <command>snapper create <option>-d "Before the Apache config
        cleanup"</option></command>
     </term>
     <listitem>
      <para>
       Creates a stand-alone snapshot (type single) for the default
       (<literal>root</literal>) configuration with a description. Because no
       cleanup-algorithm is specified, the snapshot will never be deleted
       automatically.  
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>snapper <option>-c home</option> create <option>-d ".-file
        cleanup in ~tux"</option></command>
     </term>
     <listitem>
      <para>
       Creates a stand-alone snapshot (type single) for a custom configuration
       named <literal>home</literal> with a description. Because no
       cleanup-algorithm is specified, the snapshot will never be deleted
       automatically.  
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>snapper <option>-c home</option> create <option>-d "daily HOME
        backup" -c timeline</option></command>
     </term>
     <listitem>
      <para>
       Creates a stand-alone snapshot (type single) for a custom configuration
       named <literal>home</literal> with a description. The file will
       automatically be deleted when it meets the criteria specified for the
       timeline cleanup-algorithm in the configuration.
      </para>
     </listitem>
    </varlistentry>    
   </variablelist>
  </sect2>


  <sect2 id="sec.snapper.manage.modify">
   <title>Modifying Snapshot Metadata</title>
   <para>
    Snapper allows to modify the description, the cleanup algorithm and the
    userdata of a snapshot. All other metadata cannot be changed.
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <command>snapper modify <option>-c "timeline"</option> 10</command>
     </term>
     <listitem>
      <para>
       Modifies the metadata of snapshot 10 for the default
       (<literal>root</literal>) configuration. The cleanup algorithm is set
       to <literal>timeline</literal>.
      </para>
     </listitem>
    </varlistentry>    
    <varlistentry>
     <term>
      <command>snapper <option>-c home</option> modify <option>-d "daily
        backup" -c ""</option> 120</command>
     </term>
     <listitem>
      <para>
       Modifies the metadata of snapshot 120 for a custom configuration
       named <literal>home</literal>. A new description is set and the
       cleanup algorithm is unset.
      </para>
     </listitem>
    </varlistentry>    
   </variablelist>
  </sect2>
  
  
  <sect2 id="sec.snapper.manage.delete">
   <title>Deleting Snapshots</title>
   <para>
    To delete a snapshot, you need to know its number. Get it by running
    <command>snapper list</command>. To delete a snapshot, run
    <command>snapper delete <replaceable>NUMBER</replaceable></command>. When
    deleting a <literal>pre</literal> snapshot, you should always delete its
    corresponding <literal>post</literal> snapshot (and vice-versa).
   </para>
   <variablelist>
    <varlistentry>
     <term><command>snapper delete 65</command></term>
     <listitem>
      <para>
       Deletes snapshot 65 for the default (<literal>root</literal>)
       configuration.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>snapper <option>-c home</option> delete 89 90</term>
     <listitem>
      <para>
       Deletes snapshots 89 and 90 for a custom configuration
       named <literal>home</literal>.  
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   
   <screen>snapper delete 65
snapper -c myconfig delete 89 90</screen>
   
   <tip>
    <title>Old Snapshots Occupy More Disk Space</title>
    <para>
     If you delete snapshots in order to free space on your harddisk (see
     <xref linkend="sec.snapper.requires.diskspace"/> for details), make sure
     to delete old snapshots first. The older a snapshot is, the more
     disk space it occupies.
    </para>
   </tip>

   <para>
    Snapshots are also automatically deleted by a daily cron-job. Refer to
    <xref linkend="sec.snapper.manage.metadata.cleanup"/> for details.
   </para>
  </sect2>
  

  
 </sect1>
 
 <sect1 id="sec.snapper.disable">
  <title>Disabling Snapper</title>
  <para>
   If you have set up the root partition with <literal>Btrfs</literal> during
   the installation, Snapper automatically creates hourly snapshots of the
   system, as well as pre- and post-snapshots for YaST and zypper
   transactions. Each of these tasks can be disabled as follows:
  </para>
  <variablelist>
   <varlistentry>
    <term>Disabling Hourly Snapshots</term>
    <listitem>
     <para>
      Edit <filename>/etc/snapper/configs/root</filename> and set
      <envar>TIMELINE_CREATE</envar> to <literal>no</literal>:
     </para>
     <screen>TIMELINE_CREATE="no"</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disabling zypper snapshots</term>
    <listitem>
     <para>
      Uninstall the package <systemitem class="resource">snapper-zypp-plugin</systemitem>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disabling YaST snapshots</term>
    <listitem>
     <para>
      Edit <filename>/etc/sysconfig/yast2</filename> and set
      <envar>USE_SNAPPER</envar> to <literal>no</literal>:
     </para>
     <screen>USE_SNAPPER="no"</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 
 <sect1 id="sec.snapper.config">
  <title>Creating Snapper Configurations</title>
  <para>
   The way Snapper behaves is defined in a config file that is specific for
   each partition or <literal>Btrfs</literal> subvolume. These config files reside under
   <filename>/etc/snapper/configs/</filename>. The default config installed
   with Snapper for the <filename>/</filename> directory is named
   <filename>root</filename>. It creates and manages the YaST and zypper
   snapshots as well as the hourly backup snapshot for <filename>/</filename>.
  </para>
  <para>
   You may create your own configurations for other partitions formatted with
   <literal>Btrfs</literal> or existing subvolumes on a <literal>Btrfs</literal> partition. In
   the following example we will set up a Snapper configuration for backing up
   the webserver data residing on a separate, <literal>Btrfs</literal>-formatted partition
   mounted at <filename>/srv/www</filename>.
  </para>
  <para>
   You can use either <command>snapper</command> itself or the YaST
   <guimenu>Snapper</guimenu> module to restore files from these snapshots. In
   YaST you need to select your <guimenu>Current Configuration</guimenu>,
   while you need to specify your config for <command>snapper</command> with
   the global switch <option>-c</option> (e.g. <command>snapper <option>-c
     myconfig</option> list</command>).
  </para>
  <para>
   To create a new Snapper configuration, run <command>snapper
    create-config</command>:
  </para>
  <screen>snapper -c www-data<co id="snapper.create.name"/> create-config
   /srv/www<co id="snapper.create.volume"/></screen>
  <calloutlist>
   <callout arearefs="snapper.create.name">
    <para>
     Name of config file.
    </para>
   </callout>
   <callout arearefs="snapper.create.volume">
    <para>
     Mount point of the partition or <literal>Btrfs</literal> subvolume to snapshot.
    </para>
   </callout>
  </calloutlist>
  <para>
   This command will create a new config file
   <filename>/etc/snapper/config-templates/www-data</filename> with reasonable
   default values (taken from
   <filename>/etc/snapper/config-templates/default</filename>). 
  </para>

  <tip>
   <title>Config Defaults</title>
   <para>
    Default values for a new config are taken from
    <filename>/etc/snapper/config-templates/default</filename>. To use your
    own set of defaults, create a copy of this file in the same directory and
    adjust it to your needs. To use it, specify the <option>-t</option> option
    with the create-config command:
   </para>
   <screen>snapper -c www-data create-config -t my_defaults /srv/www</screen>
  </tip>

  <sect2 id="sec.snapper.config.modify">
   <title>Adjusting the Config File</title>
   <para>
    To adjust the config file, you need to modify it with an editor. It
    contains key/value pairs in the form of
    <literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>. You
    may only change the <replaceable>value</replaceable>.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>SUBVOLUME</literal></term>
     <listitem>
      <para>
       Mount point of the partition or subvolume to snapshot. Do not change.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>FSTYPE</literal></term>
     <listitem>
      <para>
       Filesystem type of the partition. Do not change.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>NUMBER_CLEANUP</literal></term>
     <listitem>
      <para>
       Defines whether to automatically delete old snapshots when the total
       snapshot count exceeds a number specified with
       <literal>NUMBER_LIMIT</literal> <emphasis>and</emphasis> an age
       specified with <literal>NUMBER_MIN_AGE</literal>. Valid values:
       <literal>yes</literal>, <literal>no</literal>
      </para>
      <note>
       <title>Limit and Age</title>
       <para>
        <literal>NUMBER_LIMIT</literal> and <literal>NUMBER_MIN_AGE</literal>
        are always evaluated both. Snapshots are only deleted when
        <emphasis>both</emphasis> conditions are met. If you always want to
        keep a certain number of snapshots regardless of their age, set
        <literal>NUMBER_MIN_AGE</literal> to <literal>0</literal>. On the
        other hand, if you do not want to keep snapshots beyond a certain age,
        set <literal>NUMBER_LIMIT</literal> to <literal>0</literal>.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>NUMBER_LIMIT</literal></term>
     <listitem>
      <para>
       Defines how many snapshots to keep if <literal>NUMBER_CLEANUP</literal>
       is set to <literal>yes</literal>. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>NUMBER_MIN_AGE</literal></term>
     <listitem>
      <para>
       Defines the minimum age in seconds a snapshot must have before it can
       automatically be deleted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>TIMELINE_CREATE</literal></term>
     <listitem>
      <para>
       If set to <literal>yes</literal>, hourly snapshots are created.This is
       currently the only way to automatically create snapshots, therefore
       setting it to <literal>yes</literal> is strongly recommended. 
       Valid values: <literal>yes</literal>, <literal>no</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>TIMELINE_CLEANUP</literal></term>
     <listitem>
      <para>
       Defines whether to automatically delete old snapshots when the snapshot
       count exceeds a number specified with the
       <literal><replaceable>TIMELINE_LIMIT_*</replaceable></literal> options
       <emphasis>and</emphasis> an age specified with
       <literal>TIMELINE_MIN_AGE</literal>. Valid values:
       <literal>yes</literal>, <literal>no</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>TIMELINE_MIN_AGE</literal></term>
     <listitem>
      <para>
       Defines the minimum age in seconds a snapshot must have before it can
       automatically be deleted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>TIMELINE_LIMIT_HOURLY</literal>,
      <literal>TIMELINE_LIMIT_DAILY</literal>,
      <literal>TIMELINE_LIMIT_MONTHLY</literal>,
      <literal>TIMELINE_LIMIT_YEARLY</literal></term>
     <listitem>
      <para>
       Number of snapshots to keep for hour, day, month, year. 
      </para>
      <example id="ex.snapper.config.timeline">
       <title>Example timeline configuration</title>
       <screen>TIMELINE_CREATE="yes"
TIMELINE_CLEANUP="yes"
TIMELINE_MIN_AGE="1800"
TIMELINE_LIMIT_HOURLY="10"
TIMELINE_LIMIT_DAILY="10"
TIMELINE_LIMIT_MONTHLY="10"
TIMELINE_LIMIT_YEARLY="10"
       </screen>
      </example>
      <para>
       This example configuration enables hourly screenshots which are
       automatically cleaned up.
       <literal>TIMELINE_MIN_AGE</literal> and
       <literal>TIMELINE_LIMIT_*</literal> are always evaluated both. In this
       example, the minimum age of a snapshot, before it can be deleted is set
       to 30 minutes (1800 seconds). Since we create hourly snapshots, this
       ensures that only the latest snapshots are kept. If
       <literal>TIMELINE_LIMIT_DAILY</literal> is set to not zero, this means
       that the first screenshot of the day is kept, too. 
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <title>Snapshots to be Kept</title>
       <listitem>
        <para>
         Hourly: The last ten snapshots that have been made
        </para>
       </listitem>
       <listitem>
        <para>
         Daily: The first daily snapshot that has been made is kept for the
         last ten days. 
        </para>
       </listitem>
       <listitem>
        <para>
         Monthly: The first snapshot made on the last day of the month is
         kept for the last ten months.
        </para>
       </listitem>
       <listitem>
        <para>
         Yearly: The first snapshot made on Dec 31st is kept for the last
         ten years.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 
 
 <sect1 id="sec.snapper.limits">
  <title>Limitations</title>
  <para>
   Although being ready for production, <literal>Btrfs</literal> as well as
   Snapper are constantly developed further. The following limitations exist
   at the moment. It is planned to solve these issues in future releases.
  </para>
  <sect2 id="sec.snapper.limits.consistency">
   <title>Data Consistency</title>
   <para>
    There is no mechanism to ensure data consistency when creating
    snapshot. Whenever a file is written (e.g. a database) at the same time
    the snapshot is created, it will result in a broken or partly written
    file. Restoring such a file will cause problems. Therefore it is strongly
    recommended to <emphasis>always</emphasis> closely review the list of
    changed files and their diffs. Only restore files that really need to
    belonging to the action you want to roll back.
   </para>
  </sect2>
  <sect2 id="sec.snapper.limits.user">
   <title>Reverting User Additions</title>
   <para>
    Usually <filename>/home</filename> resides on a separate partition. Such a
    separate partition is not part of the default configuration for doing
    YaST rollbacks. Therefore the user's home partition will not be deleted
    when reverting a user addition using Snapper. It is strongly recommended
    to use the YaST <guimenu>User and Group Management</guimenu> tool to
    remove users. 
   </para>
  </sect2>
  <sect2 id="sec.snapper.limits.kernel">
   <title>
    No Rollback on <filename>/boot</filename> and Boot Loader Changes
   </title>
   <para>
    Currently <phrase os="osuse">openSUSE</phrase> cannot boot from <literal>Btrfs</literal>
    partitions. Therefore a separate partition for <filename>/boot</filename>
    is created upon the installation when using <literal>Btrfs</literal> for
    the system partition. Since <filename>/boot</filename> does not support
    snapshots, the following restrictions apply for YaST/zypper rollbacks:
   </para>
   <variablelist>
    <varlistentry>
     <term>no rollback for any configuration changes on the bootloader</term>
     <listitem>
      <para>
       The only file that can be rolled back is the bootloader configuration
       file in <filename>/etc</filename>. The main configuration files reside
       under <filename>/boot</filename> and cannot be rolled back.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>no complete rollback for Kernel installations</term>
     <listitem>
      <para>
       The Kernel itself and its initrd are installed in the
       <filename>/boot</filename> partition, whereas Kernel modules or sources
       are installed in <filename>/var/lib</filename> and
       <filename>/usr/src</filename>, respectively. Whatsmore, each Kernel
       installation also changes the bootloader configuration files in /boot.
       So whenever you do a rollback that involves undoing a Kernel
       installation, you need to manually remove the Kernel and its initrd
       from /boot and adjust the bootloader configuration by removing the boot
       entry for the Kernel.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 
 <sect1 id="sec.snapper.faqs">
  <title>Frequently Asked Questions</title>
  <variablelist>
   <varlistentry>
    <term>
     Why does Snapper never show changes in <filename>/var/log</filename>,
     <filename>/tmp</filename> and other directories?
    </term>
    <listitem>
     <para>
      For some directories we decided to disable snapshotting, e.g.
      <filename>/var/log</filename> since reverting logs makes searching for
      problems difficult. To exclude a path from snapshotting we create a
      subvolume for that path. The following mount points are excluded from
      snapshotting on <phrase os="osuse">openSUSE</phrase>:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <filename>/opt</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/srv</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/tmp</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/crash</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/log</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/run</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/spool</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/tmp</filename>
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Can I boot a Snapshot from the Bootloader?</term>
    <listitem>
     <para>
      This is currently not possible. The bootloader on <phrase os="osuse">openSUSE</phrase>
      currently does not support booting from a <literal>Btrfs</literal>
      partition. 
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 
</chapter>
