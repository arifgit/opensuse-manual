<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="libvirt_managing.xml" id="cha.libvirt.managing">
 <title>Basic VM Guest Management</title>
 <para>
  Basic management tasks such as starting or stopping a VM Guest, can
  either be done using the graphical application Virtual Machine Manager or on the command
  line using <command>virsh</command>. Connecting to the graphical console
  via VNC is only possible from a graphical user interface.
 </para>
 <sect1 id="sec.libvirt.managing.list">
  <title>Listing VM Guests</title>

  <para>
   In order to be able to list VM Guests, you need to connect to a VM Host Server
   first. If you start the management tool on the VM Host Server itself, you are
   automatically connected. When operating from remote, refer to
   <xref linkend="sec.libvirt.connect.connecting"/> for instructions.
  </para>

  <sect2 id="sec.libvirt.managing.list.vmm">
   <title>Listing VM Guests with Virtual Machine Manager</title>
   <para>
    The main Window of the Virtual Machine Manager shows a list of all VM Guests for each
    VM Host Server it is connected to. Each VM Guest entry contains the machine's
    name, its status (<guimenu>Running</guimenu>, <guimenu>Paused</guimenu>,
    or <guimenu>Shutoff</guimenu>) displayed as icon and literal, and a CPU
    usage bar.
   </para>
  </sect2>

  <sect2 id="sec.libvirt.managing.list.virsh">
   <title>Listing VM Guests with <command>virsh</command></title>
   <para>
    Use the command <command>virsh <option>list</option></command> to get a
    list of VM Guests:
   </para>
   <variablelist>
    <varlistentry>
     <term>List running guests on <systemitem class="systemname">localhost</systemitem>
     </term>
     <listitem>
      <screen>virsh -c qemu:///system list</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>List running and inactive guests as user <systemitem class="username">root</systemitem>s on a remote host over a TLS connection</term>
     <listitem>
      <screen>virsh -c qemu+tls://root@mercury.example.com/system list --all</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>List running and inactive guests as user tux on a remote host over an SSH tunnel</term>
     <listitem>
      <screen>virsh -c qemu+ssh://tux@mercury.example.com/system list --inactive</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.vnc">
  <title>Opening a Graphical Console</title>

  <para>
   Opening a Graphical Console to a VM Guest lets you interact with the
   machine like a physical host via a VNC connection. If accessing the VNC
   server requires authentication, you are prompted to enter a user name (if
   applicable) and a password.
  </para>

  <para>
   Once you click into the VNC console, the cursor is <quote>grabbed</quote>
   and cannot be used outside the console anymore. To release it, press
   <keycombo> <keycap function="alt"/> <keycap function="control"/>
   </keycombo>.
  </para>

  <tip>
   <title>Seamless (Absolute) Cursor Movement</title>
   <para>
    In order to prevent the console from grabbing the cursor and to enable
    seamless cursor movement, add a tablet input device to the VM Guest.
    See <xref linkend="sec.libvirt.config.tablet"/> for more information.
   </para>
  </tip>

  <para>
   Certain key combinations such as <keycombo> <keycap function="control"/>
   <keycap function="alt"/> <keycap function="delete"/> </keycombo> are
   interpreted by the host system and are not passed to the VM Guest.
  </para>

  <para>
   To pass such key combinations to a VM Guest, open the <guimenu>Send
   Key</guimenu> menu from the VNC window and choose the desired key
   combination entry. The <guimenu>Send Key</guimenu> menu is only available
   when using Virtual Machine Manager and <command>virt-viewer</command>
  </para>

  <note>
   <title>Supported VNC Viewer</title>
   <para>
    Principally all VNC viewers are able to connect to the console of a
    VM Guest. However, if you are using SASL authentication and/or TLS/SSL
    connection to access the guest, the options become limited. Common VNC
    viewers such as <literal>tightvnc</literal> or
    <literal>tigervnc</literal> support neither SASL authentication or
    TSL/SSL. The only supported alternative to Virtual Machine Manager and
    <command>virt-viewer</command> is <command>vinagre</command>.
   </para>
  </note>

  <sect2 id="sec.libvirt.managing.vnc.vmm">
   <title>Opening a Graphical Console with Virtual Machine Manager</title>
   <procedure>
    <step performance="required">
     <para>
      In the Virtual Machine Manager, right-click on a VM Guest entry.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <guimenu>Open</guimenu> from the pop-up menu.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.managing.vnc.viewer">
   <title>Opening a Graphical Console with <command>virt-viewer</command></title>
   <para>
    <command>virt-viewer</command> is a simple VNC viewer with added
    functionality for displaying VM Guest consoles. It can, for example, be
    started in <quote>wait</quote> mode, where it waits for a VM Guest to
    start before it connects. It also supports automatically reconnecting to
    a VM Guest that is rebooted.
   </para>
   <para>
    <command>virt-viewer</command> addresses VM Guests by name, by ID or by
    UUID. Use <command>virsh <option>list --all</option></command> to get
    this data.
   </para>
   <para>
    To connect to a guest that is running or paused, either use the ID,
    UUID, or name. VM Guests that are shut off do not have an IDâ€”you
    can only connect by UUID or name.
   </para>
   <variablelist>
    <varlistentry>
     <term>Local connect to guest with ID 8</term>
     <listitem>
      <screen>virt-viewer -c qemu:///system 8</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Local connect to the inactive guest sles11; will connect once the guest starts</term>
     <listitem>
      <screen>virt-viewer -c qemu:///system --wait sles11</screen>
      <para>
       With the <option>--wait</option> option, the connection will be
       upheld even if the VM Guest is not running at the moment. Once the
       guest starts, the viewer will be launched.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Remote connect via ssh:</term>
     <listitem>
      <screen>virt-viewer -c qemu+ssh://root@mercury.example.com/system -w sles11</screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    For more information, see <command>virt-viewer
    <option>--help</option></command> or <command>man 1
    virt-viewer</command>.
   </para>
   
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.status">
  <title>Changing a VM Guest's State: Start, Stop, Pause</title>

  <para>
   Starting, stopping or pausing a VM Guest can either be done with Virtual Machine Manager
   or <command>virsh</command>. You can also configure a VM Guest to be
   automatically started when booting the VM Host Server.
  </para>

  <para>
   When shutting down a VM Guest, you may either shut it down gracefully,
   or force the shutdown. The latter is equivalent to pulling the power plug
   on a physical host and is only recommended if there are no alternatives.
   Forcing a shutdown may cause file system corruption and loss of data on
   the VM Guest.
  </para>

  <tip>
   <title>Graceful Shutdown</title>
   <para>
    In order to be able to perform a graceful shutdown, the VM Guest must
    be configured to support ACPI. If you have created the guest with
    <command>vm-install</command> or with Virtual Machine Manager, ACPI should be available.
    Use the following procedure in Virtual Machine Manager to check:
   </para>
   <para>
    Double-click the VM Guest entry in Virtual Machine Manager. Choose <menuchoice>
    <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice> and
    then <menuchoice> <guimenu>Overview</guimenu> <guimenu>Machine
    Settings</guimenu></menuchoice>. <guimenu>ACPI</guimenu> should be
    checked.
   </para>
   <para>
    Depending on the guest operating system, enabling ACPI may not be
    sufficient. It is strongly recommended to test shutting down and
    rebooting a guest before releasing it to production. openSUSE or
    SUSE Linux Enterprise Desktop, for example, may require PolicyKit authorization for shutdown and
    reboot. Make sure this policy is turned off on all VM Guests.
   </para>
   <para>
    If ACPI was enabled during a Windows XP/Server 2003 guest installation,
    turning it on in the VM Guest configuration alone is not sufficient.
    See the following articles for more information:
   </para>
   <simplelist>
    <member><ulink url="http://support.microsoft.com/kb/314088/EN-US/"/>
    </member>
    <member><ulink url="http://support.microsoft.com/?kbid=309283"/>
    </member>
   </simplelist>
   <para>
    A graceful shutdown is of course always possible from within the guest
    operating system, regardless of the VM Guest's configuration.
   </para>
  </tip>

  <sect2 id="sec.libvirt.managing.status.vmm">
   <title>Changing a VM Guest's State with Virtual Machine Manager</title>
   <para>
    Changing a VM Guest's state can either be done from Virtual Machine Manager's main
    window, or from a VNC window.
   </para>
   <procedure>
    <title>State Change from the Virtual Machine Manager Window</title>
    <step performance="required">
     <para>
      Right-click on a VM Guest entry.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <guimenu>Run</guimenu>, <guimenu>Pause</guimenu>, or one of the
      <guimenu>Shutdown options</guimenu> from the pop-up menu.
     </para>
    </step>
   </procedure>
   <procedure>
    <title>State change from the VNC Window</title>
    <step performance="required">
     <para>
      Open a VNC Window as described in
      <xref linkend="sec.libvirt.managing.vnc.vmm"/>.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <guimenu>Run</guimenu>, <guimenu>Pause</guimenu>, or one of the
      <guimenu>Shut Down</guimenu> options either from the toolbar or from
      the <guimenu>Virtual Machine</guimenu> menu.
     </para>
    </step>
   </procedure>
   <sect3 id="sec.libvirt.managing.status.vmm.autostart">
    <title>Autostarting a VM Guest</title>
    <para>
     Automatically starting a guest when the VM Host Server boots is not enabled
     by default. This feature needs to be turned on for each VM Guest
     individually. There is no way to activate it globally.
    </para>
    <procedure>
     <step performance="required">
      <para>
       Double-click the VM Guest entry in Virtual Machine Manager to open its console.
      </para>
     </step>
     <step performance="required">
      <para>
       Choose <menuchoice> <guimenu>View</guimenu>
       <guimenu>Details</guimenu></menuchoice> to open the VM Guest
       configuration window.
      </para>
     </step>
     <step performance="required">
      <para>
       Choose <guimenu>Boot Options</guimenu> and check <guimenu>Start
       virtual machine on host boot up</guimenu>.
      </para>
     </step>
     <step performance="required">
      <para>
       Save the new configuration with <guimenu>Apply</guimenu>.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 id="sec.libvirt.managing.status.virsh">
   <title>Changing a VM Guest's State with <command>virsh</command></title>
   <para>
    In the following examples the state of a VM Guest named
    <quote>sles11</quote> is changed.
   </para>
   <variablelist>
    <varlistentry>
     <term>Start</term>
     <listitem>
      <screen>virsh -c qemu:///system start sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pause</term>
     <listitem>
      <screen>virsh -c qemu:///system suspend sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Reboot</term>
     <listitem>
      <screen>virsh -c qemu:///system reboot sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Graceful shutdown</term>
     <listitem>
      <screen>virsh -c qemu:///system shutdown sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Force shutdown</term>
     <listitem>
      <screen>virsh -c qemu:///system destroy sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Turn on autostart</term>
     <listitem>
      <screen>virsh -c qemu:///system autostart sles11</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Turn off autostart</term>
     <listitem>
      <screen>virsh -c qemu:///system autostart --disable sles11</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.manage.save">
  <title>Saving and Restoring VM Guests</title>

  <para>
   Saving a VM Guest preserves the exact state of the guestâ€™s memory. The
   operation is slightly similar to <emphasis>hibernating</emphasis> a
   computer. A saved VM Guest can be quickly restored to its previously
   saved running condition.
  </para>

  <para>
   When saved, the VM Guest is paused, its current memory state is saved to
   disk, and then the guest is stopped. The operation does not make a copy
   of any portion of the VM Guestâ€™s virtual disk. The amount of time to
   save the virtual machine depends on the amount of memory allocated. When
   saved, a VM Guestâ€™s memory is returned to the pool of memory available
   on the VM Host Server.
  </para>

  <para>
   The restore operation loads a VM Guestâ€™s previously saved memory state
   file and starts it. The guest is not booted but rather resumes at the
   point where it was previously saved. The operation is slightly similar to
   coming out of hibernation.
  </para>

  <para>
   The VM Guest is saved to a state file. Make sure there is enough space
   on the partition you are going to save to. Issue the following command on
   the guest to get a rough estimation of the file size in megabytes to be
   expected:
  </para>

  <screen>free -m | awk '/^Mem:/ {print $3}'</screen>

  <warning>
   <para>
    After using the save operation, do not boot, start, or run the saved
    VM Guest. Doing so would cause the machine's virtual disk and the saved
    memory state getting out of sync and can result in critical errors when
    restoring the guest.
   </para>
  </warning>

  <sect2 id="sec.libvirt.manage.save.vmm">
   <title>Saving / Restoring with Virtual Machine Manager</title>
   <procedure>
    <title>Saving a VM Guest</title>
    <step performance="required">
     <para>
      Open a VNC connection window to a VM Guest. Make sure the guest is
      running.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <menuchoice> <guimenu>Virtual Machine</guimenu>
      <guimenu>Save</guimenu> </menuchoice>
     </para>
    </step>
    <step performance="required">
     <para>
      Choose a location and a file name.
     </para>
    </step>
    <step performance="required">
     <para>
      Click <guimenu>Save</guimenu>. Saving the guest's state may take some
      time. After the operation has finished, the VM Guest will
      automatically shut down.
     </para>
    </step>
   </procedure>
   <procedure>
    <title>Restoring a VM Guest</title>
    <step performance="required">
     <para>
      Start the Virtual Machine Manager.
     </para>
    </step>
    <step performance="required">
     <para>
      Type <keycombo> <keycap function="alt"/> <keycap>R</keycap>
      </keycombo> or choose <menuchoice> <guimenu>File</guimenu>
      <guimenu>Restore Saved Machine</guimenu> </menuchoice>.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose the file you want to restore and proceed with
      <guimenu>Open</guimenu>. Once the file has been successfully loaded,
      the VM Guest is up and running.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.manage.save.virsh">
   <title>Saving / Restoring with <command>virsh</command></title>
   <para>
    Save a running VM Guest with the command <command>virsh
    <option>save</option></command> and specify the file to where it is
    saved.
   </para>
   <variablelist>
    <varlistentry>
     <term>Save the guest named opensuse11</term>
     <listitem>
      <screen>virsh save opensuse11 /virtual/saves/opensuse11.vmsav</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Save the guest with the ID 37</term>
     <listitem>
      <screen>virsh save 37 /virtual/saves/opensuse11.vmsave</screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To restore it, use <command>virsh <option>restore</option></command>:
   </para>
   <screen>virsh restore /virtual/saves/opensuse11.vmsave</screen>
  </sect2>
 </sect1>
 <sect1 id="sec.libvirt.managing.delete">
  <title>Deleting a VM Guest</title>

  <para>
   Deleting a VM Guest removes its XML configuration by default. Since the
   attached storage is not deleted by default, you will be able to use it
   with another VM Guest. With Virtual Machine Manager you may also delete a guest's storage
   files as wellâ€”this will completely erase the guest.
  </para>

  <para>
   In order to delete a VM Guest, it has to be shut down first (refer to
   <xref linkend="sec.libvirt.managing.status"/> for instructions). It is
   not possible to delete a running guest.
  </para>

  <sect2 id="sec.libvirt.managing.delete.vmm">
   <title>Deleting a VM Guest with Virtual Machine Manager</title>
   <procedure>
    <step performance="required">
     <para>
      In the Virtual Machine Manager, right-click on a VM Guest entry.
     </para>
    </step>
    <step performance="required">
     <para>
      Choose <guimenu>Delete</guimenu> from the pop-up menu.
     </para>
    </step>
    <step performance="required">
     <para>
      A confirmation window opens. Clicking <guimenu>Delete</guimenu> will
      permanently erase the VM Guest. The deletion is not recoverable.
     </para>
     <para>
      You may also choose to permanently delete the guest's virtual disk by
      ticking <guimenu>Delete Associated Storage Files</guimenu>. The
      deletion is not recoverable either.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.libvirt.managing.delete.virsh">
   <title>Deleting a VM Guest with <command>virsh</command></title>
   <para>
    To delete a VM Guest with <command>virsh</command> run <command>virsh
    <option>undefine</option> <replaceable>VM_NAME</replaceable></command>.
    There is no option to automatically delete the attached storage files.
   </para>
  </sect2>
 </sect1>
</chapter>
